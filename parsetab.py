
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND AND_BLOCK ASIGNACION BEGIN_BLOCK BREAK CADENA CASE CLASS COMA COMENTARIO CORCHETE_DER CORCHETE_IZQ DEF DEFINED DIFERENTE DIVIDIR DO DOSPUNTOS DOSPUNTOS_IGUAL ELSE ELSIF END END_BLOCK ENSURE EXPONENCIACION FALSE FLECHA_HASH FLOTANTE GETS IF IGUAL_IGUAL IN INTERROGACION LENGTH LLAVE_DER LLAVE_IZQ MAS MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MENOS MODULE MODULO MULTIPLICAR NEXT NOT NOT_BLOCK NUMERO OR PARENTESIS_DER PARENTESIS_IZQ PUNTO PUNTO_Y_COMA PUTS REDO RESERVADA RETRY RETURN SELF SIMBOLO SUPER THEN TRUE UNLESS UNTIL VARIABLE_CLASE VARIABLE_GLOBAL VARIABLE_INSTANCIA VARIABLE_LOCAL WHEN WHILEprograma : sentencia\n                | sentencia programasentencia : asignacion\n                | impresion\n                | array\n                | condicion\n                | funcionasignacion : variable ASIGNACION valoressolicitud_datos : VARIABLE_LOCAL ASIGNACION GETS PARENTESIS_IZQ PARENTESIS_DERimpresion : PUTS PARENTESIS_IZQ argumentos PARENTESIS_DERimpresion : PUTSarray : CORCHETE_IZQ argumentos CORCHETE_DERcondicion : if\n                | if_else\n                | if_elsif_elseif : IF expresion instrucciones END_BLOCK\n            | IF expresion THEN instrucciones END_BLOCKif_else : IF expresion instrucciones ELSE instrucciones END_BLOCK\n               | IF expresion THEN instrucciones ELSE instrucciones END_BLOCKif_elsif_else : IF expresion instrucciones elsif_clauses END_BLOCK\n                     | IF expresion THEN instrucciones elsif_clauses END_BLOCK\n                     | IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK\n                     | IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCKelsif_clauses : ELSIF expresion instrucciones\n                     | ELSIF expresion THEN instrucciones\n                     | ELSIF expresion instrucciones elsif_clauses\n                     | ELSIF expresion THEN instrucciones elsif_clausesfuncion : DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCKparametros : parametro\n                  | parametro COMA parametrosparametro : VARIABLE_LOCAL\n                | emptyexpresion : var_expresion\n                | var_expresion comparadores var_expresion\n                | expresion comparadores expresion\n                | PARENTESIS_IZQ expresion PARENTESIS_DER\n                | NOT_BLOCK expresion\n                | expresion operador_logico expresioncomparadores : MAYOR_QUE\n                    | MENOR_QUE\n                    | IGUAL_IGUAL\n                    | DIFERENTE\n                    | MAYOR_IGUAL\n                    | MENOR_IGUALoperador_logico : AND\n                        | OR\n                        | NOTvar_expresion : valor\n                    | booleanoinstrucciones : instruccion\n                    | instruccion instrucciones\n                    | instruccion PUNTO_Y_COMA instruccionesinstruccion : asignacion\n                    | impresion\n                    | condicion\n                    | llamada_funcion\n                    | funcionllamada_funcion : VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER\n                       |  VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DERvariable : VARIABLE_LOCAL\n                | VARIABLE_GLOBAL\n                | VARIABLE_INSTANCIA\n                | VARIABLE_CLASEbooleano : FALSE\n                | TRUE argumentos : argumento\n                    | argumento COMA argumentosargumento : booleano\n                | operacionAritmetica\n                | array\n                | empty empty :valores : operacionAritmetica\n                | SIMBOLO\n                | booleano\n                | arrayvalor : NUMERO\n            | FLOTANTE\n            | CADENA\n            | variableoperacionAritmetica : valor \n                         | valor operador operacionAritmeticaoperador : MAS\n                | MENOS\n                | MULTIPLICAR\n                | DIVIDIR\n                | MODULO\n                | EXPONENCIACIONhash : LLAVE_IZQ pares LLAVE_DERpares : par\n             | par COMA parespar : valor FLECHA_HASH valoruntil : UNTIL expresion DO instrucciones END_BLOCK\n             | UNTIL expresion instrucciones END_BLOCKfuncion : DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCKparametros_defecto : parametro_defecto\n                          | parametro_defecto COMA parametros_defectoparametro_defecto : VARIABLE_LOCAL\n                         | VARIABLE_LOCAL ASIGNACION valorcadena_interpolacion : CADENA LLAVE_IZQ variable LLAVE_DERincremento : VARIABLE_LOCAL MAS ASIGNACION expresion'
    
_lr_action_items = {'PUTS':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,91,92,96,97,99,101,102,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[9,9,-3,-4,-5,-6,-7,-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,9,-33,-48,-49,-8,-73,-74,-75,-76,-12,9,9,-53,-54,-55,-56,-57,-37,-10,-82,-16,9,-35,-38,9,-34,-36,9,9,-20,9,9,-17,9,-59,-18,9,-21,9,-58,-28,-95,-22,-19,-23,]),'CORCHETE_IZQ':([0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,21,22,29,30,31,32,33,34,35,43,44,45,46,47,49,50,82,84,91,100,109,112,125,130,133,134,135,138,141,],[10,10,-3,-4,-5,-6,-7,-11,10,-13,-14,-15,-60,-61,-62,-63,10,10,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,10,-10,-82,-16,10,-20,-17,-18,-21,-28,-95,-22,-19,-23,]),'DEF':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,91,92,96,97,99,101,102,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[14,14,-3,-4,-5,-6,-7,-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,14,-33,-48,-49,-8,-73,-74,-75,-76,-12,14,14,-53,-54,-55,-56,-57,-37,-10,-82,-16,14,-35,-38,14,-34,-36,14,14,-20,14,14,-17,14,-59,-18,14,-21,14,-58,-28,-95,-22,-19,-23,]),'VARIABLE_LOCAL':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,91,92,94,96,97,99,100,101,102,103,104,105,106,107,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[15,15,-3,-4,-5,-6,-7,-11,15,-13,-14,-15,36,-60,-61,-62,-63,15,15,15,-64,-65,-81,-77,-78,-79,-80,78,-33,15,15,-48,-49,-8,-73,-74,-75,-76,-12,15,15,-83,-84,-85,-86,-87,-88,85,78,15,15,78,-39,-40,-41,-42,-43,-44,-45,-46,-47,-53,-54,-55,-56,-57,15,-37,-10,-82,-16,78,15,-35,-38,78,15,-34,-36,15,78,78,122,124,-20,78,78,-17,78,-59,-18,78,-21,78,-58,-28,-95,-22,-19,-23,]),'VARIABLE_GLOBAL':([0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,91,92,94,96,97,99,100,101,102,103,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[16,16,-3,-4,-5,-6,-7,-11,16,-13,-14,-15,-60,-61,-62,-63,16,16,16,-64,-65,-81,-77,-78,-79,-80,16,-33,16,16,-48,-49,-8,-73,-74,-75,-76,-12,16,16,-83,-84,-85,-86,-87,-88,16,16,16,16,-39,-40,-41,-42,-43,-44,-45,-46,-47,-53,-54,-55,-56,-57,16,-37,-10,-82,-16,16,16,-35,-38,16,16,-34,-36,16,16,16,-20,16,16,-17,16,-59,-18,16,-21,16,-58,-28,-95,-22,-19,-23,]),'VARIABLE_INSTANCIA':([0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,91,92,94,96,97,99,100,101,102,103,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[17,17,-3,-4,-5,-6,-7,-11,17,-13,-14,-15,-60,-61,-62,-63,17,17,17,-64,-65,-81,-77,-78,-79,-80,17,-33,17,17,-48,-49,-8,-73,-74,-75,-76,-12,17,17,-83,-84,-85,-86,-87,-88,17,17,17,17,-39,-40,-41,-42,-43,-44,-45,-46,-47,-53,-54,-55,-56,-57,17,-37,-10,-82,-16,17,17,-35,-38,17,17,-34,-36,17,17,17,-20,17,17,-17,17,-59,-18,17,-21,17,-58,-28,-95,-22,-19,-23,]),'VARIABLE_CLASE':([0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,91,92,94,96,97,99,100,101,102,103,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[18,18,-3,-4,-5,-6,-7,-11,18,-13,-14,-15,-60,-61,-62,-63,18,18,18,-64,-65,-81,-77,-78,-79,-80,18,-33,18,18,-48,-49,-8,-73,-74,-75,-76,-12,18,18,-83,-84,-85,-86,-87,-88,18,18,18,18,-39,-40,-41,-42,-43,-44,-45,-46,-47,-53,-54,-55,-56,-57,18,-37,-10,-82,-16,18,18,-35,-38,18,18,-34,-36,18,18,18,-20,18,18,-17,18,-59,-18,18,-21,18,-58,-28,-95,-22,-19,-23,]),'IF':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,91,92,96,97,99,101,102,104,105,109,110,111,112,113,117,125,128,130,131,132,133,134,135,138,141,],[19,19,-3,-4,-5,-6,-7,-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,19,-33,-48,-49,-8,-73,-74,-75,-76,-12,19,19,-53,-54,-55,-56,-57,-37,-10,-82,-16,19,-35,-38,19,-34,-36,19,19,-20,19,19,-17,19,-59,-18,19,-21,19,-58,-28,-95,-22,-19,-23,]),'$end':([1,2,3,4,5,6,7,9,11,12,13,15,16,17,18,20,29,30,31,32,33,34,35,43,44,45,46,47,49,82,84,91,109,112,125,130,133,134,135,138,141,],[0,-1,-3,-4,-5,-6,-7,-11,-13,-14,-15,-60,-61,-62,-63,-2,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,-10,-82,-16,-20,-17,-18,-21,-28,-95,-22,-19,-23,]),'ASIGNACION':([8,15,16,17,18,78,85,124,],[21,-60,-61,-62,-63,-60,103,103,]),'PARENTESIS_IZQ':([9,19,36,39,40,61,62,64,65,66,67,68,69,70,71,72,78,94,],[22,39,58,39,39,39,39,-39,-40,-41,-42,-43,-44,-45,-46,-47,100,39,]),'PUNTO_Y_COMA':([9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,63,73,74,75,76,77,82,84,91,109,112,117,125,130,132,133,134,135,138,141,],[-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,99,-53,-54,-55,-56,-57,-10,-82,-16,-20,-17,-59,-18,-21,-58,-28,-95,-22,-19,-23,]),'END_BLOCK':([9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,91,93,95,98,108,109,112,114,115,117,119,120,125,126,127,129,130,132,133,134,135,136,137,138,139,140,141,],[-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,91,-50,-53,-54,-55,-56,-57,-10,-82,-16,109,112,-51,125,-20,-17,130,-52,-59,133,134,-18,135,-24,138,-21,-58,-28,-95,-22,-26,-25,-19,141,-27,-23,]),'ELSE':([9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,91,93,95,98,109,112,114,115,117,125,127,130,132,133,134,135,136,137,138,140,141,],[-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,92,-50,-53,-54,-55,-56,-57,-10,-82,-16,110,113,-51,-20,-17,131,-52,-59,-18,-24,-21,-58,-28,-95,-22,-26,-25,-19,-27,-23,]),'ELSIF':([9,11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,91,95,98,109,112,115,117,125,127,130,132,133,134,135,137,138,141,],[-11,-13,-14,-15,-60,-61,-62,-63,-64,-65,-81,-77,-78,-79,-80,-8,-73,-74,-75,-76,-12,94,-50,-53,-54,-55,-56,-57,-10,-82,-16,94,-51,-20,-17,-52,-59,-18,94,-21,-58,-28,-95,-22,94,-19,-23,]),'FALSE':([10,19,21,22,39,40,50,61,62,64,65,66,67,68,69,70,71,72,79,94,100,],[29,29,29,29,29,29,29,29,29,-39,-40,-41,-42,-43,-44,-45,-46,-47,29,29,29,]),'TRUE':([10,19,21,22,39,40,50,61,62,64,65,66,67,68,69,70,71,72,79,94,100,],[30,30,30,30,30,30,30,30,30,-39,-40,-41,-42,-43,-44,-45,-46,-47,30,30,30,]),'COMA':([10,15,16,17,18,22,24,25,26,27,28,29,30,31,32,33,34,35,49,50,58,84,85,88,89,90,100,106,118,122,124,],[-72,-60,-61,-62,-63,-72,50,-68,-69,-70,-71,-64,-65,-81,-77,-78,-79,-80,-12,-72,-72,-82,-31,106,107,-32,-72,-72,-99,-31,-98,]),'CORCHETE_DER':([10,15,16,17,18,23,24,25,26,27,28,29,30,31,32,33,34,35,49,50,83,84,],[-72,-60,-61,-62,-63,49,-66,-68,-69,-70,-71,-64,-65,-81,-77,-78,-79,-80,-12,-72,-67,-82,]),'NUMERO':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,94,100,103,],[32,32,32,32,32,32,32,32,-83,-84,-85,-86,-87,-88,32,32,-39,-40,-41,-42,-43,-44,-45,-46,-47,32,32,32,32,]),'FLOTANTE':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,94,100,103,],[33,33,33,33,33,33,33,33,-83,-84,-85,-86,-87,-88,33,33,-39,-40,-41,-42,-43,-44,-45,-46,-47,33,33,33,33,]),'CADENA':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,94,100,103,],[34,34,34,34,34,34,34,34,-83,-84,-85,-86,-87,-88,34,34,-39,-40,-41,-42,-43,-44,-45,-46,-47,34,34,34,34,]),'MAS':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,52,-77,-78,-79,-80,]),'MENOS':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,53,-77,-78,-79,-80,]),'MULTIPLICAR':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,54,-77,-78,-79,-80,]),'DIVIDIR':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,55,-77,-78,-79,-80,]),'MODULO':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,56,-77,-78,-79,-80,]),'EXPONENCIACION':([15,16,17,18,31,32,33,34,35,],[-60,-61,-62,-63,57,-77,-78,-79,-80,]),'MAYOR_QUE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,64,64,-48,-49,64,64,64,64,-34,-36,64,]),'MENOR_QUE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,65,65,-48,-49,65,65,65,65,-34,-36,65,]),'IGUAL_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,66,66,-48,-49,66,66,66,66,-34,-36,66,]),'DIFERENTE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,67,67,-48,-49,67,67,67,67,-34,-36,67,]),'MAYOR_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,68,68,-48,-49,68,68,68,68,-34,-36,68,]),'MENOR_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,69,69,-48,-49,69,69,69,69,-34,-36,69,]),'THEN':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,60,-33,-48,-49,-37,-35,-38,-34,-36,128,]),'AND':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,70,-33,-48,-49,70,70,70,70,-34,-36,70,]),'OR':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,71,-33,-48,-49,71,71,71,71,-34,-36,71,]),'NOT':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,96,97,101,102,111,],[-60,-61,-62,-63,-64,-65,-77,-78,-79,-80,72,-33,-48,-49,72,72,72,72,-34,-36,72,]),'PARENTESIS_DER':([15,16,17,18,22,24,25,26,27,28,29,30,31,32,33,34,35,38,41,42,48,49,50,58,80,81,83,84,85,86,87,88,89,90,96,97,100,101,102,106,116,118,121,122,123,124,],[-60,-61,-62,-63,-72,-66,-68,-69,-70,-71,-64,-65,-81,-77,-78,-79,-80,-33,-48,-49,82,-12,-72,-72,102,-37,-67,-82,-31,104,105,-29,-96,-32,-35,-38,117,-34,-36,-72,132,-99,-30,-31,-97,-98,]),'NOT_BLOCK':([19,39,40,61,62,64,65,66,67,68,69,70,71,72,94,],[40,40,40,40,40,-39,-40,-41,-42,-43,-44,-45,-46,-47,40,]),'SIMBOLO':([21,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,20,]),'sentencia':([0,2,],[2,2,]),'asignacion':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[3,3,73,73,73,73,73,73,73,73,73,73,73,73,]),'impresion':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[4,4,74,74,74,74,74,74,74,74,74,74,74,74,]),'array':([0,2,10,21,22,50,100,],[5,5,27,47,27,27,27,]),'condicion':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[6,6,75,75,75,75,75,75,75,75,75,75,75,75,]),'funcion':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[7,7,77,77,77,77,77,77,77,77,77,77,77,77,]),'variable':([0,2,10,19,21,22,37,39,40,50,51,60,61,62,63,79,92,94,99,100,103,104,105,110,111,113,128,131,],[8,8,35,35,35,35,8,35,35,35,35,8,35,35,8,35,8,35,8,35,35,8,8,8,8,8,8,8,]),'if':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'if_else':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if_elsif_else':([0,2,37,60,63,92,99,104,105,110,111,113,128,131,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'argumentos':([10,22,50,100,],[23,48,83,116,]),'argumento':([10,22,50,100,],[24,24,24,24,]),'booleano':([10,19,21,22,39,40,50,61,62,79,94,100,],[25,42,46,25,42,42,25,42,42,42,42,25,]),'operacionAritmetica':([10,21,22,50,51,100,],[26,44,26,26,84,26,]),'empty':([10,22,50,58,100,106,],[28,28,28,90,28,90,]),'valor':([10,19,21,22,39,40,50,51,61,62,79,94,100,103,],[31,41,31,31,41,41,31,31,41,41,41,41,31,118,]),'expresion':([19,39,40,61,62,94,],[37,80,81,96,97,111,]),'var_expresion':([19,39,40,61,62,79,94,],[38,38,38,38,38,101,38,]),'valores':([21,],[43,]),'operador':([31,],[51,]),'instrucciones':([37,60,63,92,99,104,105,110,111,113,128,131,],[59,95,98,108,115,119,120,126,127,129,137,139,]),'comparadores':([37,38,80,81,96,97,111,],[61,79,61,61,61,61,61,]),'operador_logico':([37,80,81,96,97,111,],[62,62,62,62,62,62,]),'instruccion':([37,60,63,92,99,104,105,110,111,113,128,131,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'llamada_funcion':([37,60,63,92,99,104,105,110,111,113,128,131,],[76,76,76,76,76,76,76,76,76,76,76,76,]),'parametros':([58,106,],[86,121,]),'parametros_defecto':([58,107,],[87,123,]),'parametro':([58,106,],[88,88,]),'parametro_defecto':([58,107,],[89,89,]),'elsif_clauses':([59,95,127,137,],[93,114,136,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> sentencia','programa',1,'p_programa','Analizador_Sintactico.py',5),
  ('programa -> sentencia programa','programa',2,'p_programa','Analizador_Sintactico.py',6),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',9),
  ('sentencia -> impresion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',10),
  ('sentencia -> array','sentencia',1,'p_sentencia','Analizador_Sintactico.py',11),
  ('sentencia -> condicion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',12),
  ('sentencia -> funcion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',13),
  ('asignacion -> variable ASIGNACION valores','asignacion',3,'p_asignacion','Analizador_Sintactico.py',16),
  ('solicitud_datos -> VARIABLE_LOCAL ASIGNACION GETS PARENTESIS_IZQ PARENTESIS_DER','solicitud_datos',5,'p_solicitud_datos','Analizador_Sintactico.py',19),
  ('impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER','impresion',4,'p_impresion','Analizador_Sintactico.py',22),
  ('impresion -> PUTS','impresion',1,'p_impresion_sin_argumentos','Analizador_Sintactico.py',25),
  ('array -> CORCHETE_IZQ argumentos CORCHETE_DER','array',3,'p_array','Analizador_Sintactico.py',32),
  ('condicion -> if','condicion',1,'p_condicion','Analizador_Sintactico.py',36),
  ('condicion -> if_else','condicion',1,'p_condicion','Analizador_Sintactico.py',37),
  ('condicion -> if_elsif_else','condicion',1,'p_condicion','Analizador_Sintactico.py',38),
  ('if -> IF expresion instrucciones END_BLOCK','if',4,'p_if','Analizador_Sintactico.py',41),
  ('if -> IF expresion THEN instrucciones END_BLOCK','if',5,'p_if','Analizador_Sintactico.py',42),
  ('if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK','if_else',6,'p_if_else','Analizador_Sintactico.py',45),
  ('if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK','if_else',7,'p_if_else','Analizador_Sintactico.py',46),
  ('if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK','if_elsif_else',5,'p_if_elsif_else','Analizador_Sintactico.py',49),
  ('if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK','if_elsif_else',6,'p_if_elsif_else','Analizador_Sintactico.py',50),
  ('if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK','if_elsif_else',7,'p_if_elsif_else','Analizador_Sintactico.py',51),
  ('if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK','if_elsif_else',8,'p_if_elsif_else','Analizador_Sintactico.py',52),
  ('elsif_clauses -> ELSIF expresion instrucciones','elsif_clauses',3,'p_elsif_clauses','Analizador_Sintactico.py',55),
  ('elsif_clauses -> ELSIF expresion THEN instrucciones','elsif_clauses',4,'p_elsif_clauses','Analizador_Sintactico.py',56),
  ('elsif_clauses -> ELSIF expresion instrucciones elsif_clauses','elsif_clauses',4,'p_elsif_clauses','Analizador_Sintactico.py',57),
  ('elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses','elsif_clauses',5,'p_elsif_clauses','Analizador_Sintactico.py',58),
  ('funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK','funcion',7,'p_funcion','Analizador_Sintactico.py',62),
  ('parametros -> parametro','parametros',1,'p_parametros','Analizador_Sintactico.py',65),
  ('parametros -> parametro COMA parametros','parametros',3,'p_parametros','Analizador_Sintactico.py',66),
  ('parametro -> VARIABLE_LOCAL','parametro',1,'p_parametro','Analizador_Sintactico.py',69),
  ('parametro -> empty','parametro',1,'p_parametro','Analizador_Sintactico.py',70),
  ('expresion -> var_expresion','expresion',1,'p_expresion','Analizador_Sintactico.py',74),
  ('expresion -> var_expresion comparadores var_expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',75),
  ('expresion -> expresion comparadores expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',76),
  ('expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER','expresion',3,'p_expresion','Analizador_Sintactico.py',77),
  ('expresion -> NOT_BLOCK expresion','expresion',2,'p_expresion','Analizador_Sintactico.py',78),
  ('expresion -> expresion operador_logico expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',79),
  ('comparadores -> MAYOR_QUE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',82),
  ('comparadores -> MENOR_QUE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',83),
  ('comparadores -> IGUAL_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',84),
  ('comparadores -> DIFERENTE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',85),
  ('comparadores -> MAYOR_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',86),
  ('comparadores -> MENOR_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',87),
  ('operador_logico -> AND','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',90),
  ('operador_logico -> OR','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',91),
  ('operador_logico -> NOT','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',92),
  ('var_expresion -> valor','var_expresion',1,'p_var_expresion','Analizador_Sintactico.py',95),
  ('var_expresion -> booleano','var_expresion',1,'p_var_expresion','Analizador_Sintactico.py',96),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','Analizador_Sintactico.py',99),
  ('instrucciones -> instruccion instrucciones','instrucciones',2,'p_instrucciones','Analizador_Sintactico.py',100),
  ('instrucciones -> instruccion PUNTO_Y_COMA instrucciones','instrucciones',3,'p_instrucciones','Analizador_Sintactico.py',101),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',104),
  ('instruccion -> impresion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',105),
  ('instruccion -> condicion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',106),
  ('instruccion -> llamada_funcion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',107),
  ('instruccion -> funcion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',108),
  ('llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER','llamada_funcion',4,'p_llamada_funcion','Analizador_Sintactico.py',111),
  ('llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER','llamada_funcion',3,'p_llamada_funcion','Analizador_Sintactico.py',112),
  ('variable -> VARIABLE_LOCAL','variable',1,'p_variable','Analizador_Sintactico.py',116),
  ('variable -> VARIABLE_GLOBAL','variable',1,'p_variable','Analizador_Sintactico.py',117),
  ('variable -> VARIABLE_INSTANCIA','variable',1,'p_variable','Analizador_Sintactico.py',118),
  ('variable -> VARIABLE_CLASE','variable',1,'p_variable','Analizador_Sintactico.py',119),
  ('booleano -> FALSE','booleano',1,'p_booleano','Analizador_Sintactico.py',122),
  ('booleano -> TRUE','booleano',1,'p_booleano','Analizador_Sintactico.py',123),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','Analizador_Sintactico.py',126),
  ('argumentos -> argumento COMA argumentos','argumentos',3,'p_argumentos','Analizador_Sintactico.py',127),
  ('argumento -> booleano','argumento',1,'p_argumento','Analizador_Sintactico.py',130),
  ('argumento -> operacionAritmetica','argumento',1,'p_argumento','Analizador_Sintactico.py',131),
  ('argumento -> array','argumento',1,'p_argumento','Analizador_Sintactico.py',132),
  ('argumento -> empty','argumento',1,'p_argumento','Analizador_Sintactico.py',133),
  ('empty -> <empty>','empty',0,'p_empty','Analizador_Sintactico.py',136),
  ('valores -> operacionAritmetica','valores',1,'p_valores','Analizador_Sintactico.py',139),
  ('valores -> SIMBOLO','valores',1,'p_valores','Analizador_Sintactico.py',140),
  ('valores -> booleano','valores',1,'p_valores','Analizador_Sintactico.py',141),
  ('valores -> array','valores',1,'p_valores','Analizador_Sintactico.py',142),
  ('valor -> NUMERO','valor',1,'p_valor','Analizador_Sintactico.py',145),
  ('valor -> FLOTANTE','valor',1,'p_valor','Analizador_Sintactico.py',146),
  ('valor -> CADENA','valor',1,'p_valor','Analizador_Sintactico.py',147),
  ('valor -> variable','valor',1,'p_valor','Analizador_Sintactico.py',148),
  ('operacionAritmetica -> valor','operacionAritmetica',1,'p_operacionAritmetica','Analizador_Sintactico.py',152),
  ('operacionAritmetica -> valor operador operacionAritmetica','operacionAritmetica',3,'p_operacionAritmetica','Analizador_Sintactico.py',153),
  ('operador -> MAS','operador',1,'p_operador','Analizador_Sintactico.py',157),
  ('operador -> MENOS','operador',1,'p_operador','Analizador_Sintactico.py',158),
  ('operador -> MULTIPLICAR','operador',1,'p_operador','Analizador_Sintactico.py',159),
  ('operador -> DIVIDIR','operador',1,'p_operador','Analizador_Sintactico.py',160),
  ('operador -> MODULO','operador',1,'p_operador','Analizador_Sintactico.py',161),
  ('operador -> EXPONENCIACION','operador',1,'p_operador','Analizador_Sintactico.py',162),
  ('hash -> LLAVE_IZQ pares LLAVE_DER','hash',3,'p_hash','Analizador_Sintactico.py',167),
  ('pares -> par','pares',1,'p_pares','Analizador_Sintactico.py',170),
  ('pares -> par COMA pares','pares',3,'p_pares','Analizador_Sintactico.py',171),
  ('par -> valor FLECHA_HASH valor','par',3,'p_par','Analizador_Sintactico.py',174),
  ('until -> UNTIL expresion DO instrucciones END_BLOCK','until',5,'p_until','Analizador_Sintactico.py',178),
  ('until -> UNTIL expresion instrucciones END_BLOCK','until',4,'p_until','Analizador_Sintactico.py',179),
  ('funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK','funcion',7,'p_funcion_parametros_defecto','Analizador_Sintactico.py',183),
  ('parametros_defecto -> parametro_defecto','parametros_defecto',1,'p_parametros_defecto','Analizador_Sintactico.py',186),
  ('parametros_defecto -> parametro_defecto COMA parametros_defecto','parametros_defecto',3,'p_parametros_defecto','Analizador_Sintactico.py',187),
  ('parametro_defecto -> VARIABLE_LOCAL','parametro_defecto',1,'p_parametro_defecto','Analizador_Sintactico.py',190),
  ('parametro_defecto -> VARIABLE_LOCAL ASIGNACION valor','parametro_defecto',3,'p_parametro_defecto','Analizador_Sintactico.py',191),
  ('cadena_interpolacion -> CADENA LLAVE_IZQ variable LLAVE_DER','cadena_interpolacion',4,'p_cadena_interpolacion','Analizador_Sintactico.py',195),
  ('incremento -> VARIABLE_LOCAL MAS ASIGNACION expresion','incremento',4,'p_incremento','Analizador_Sintactico.py',198),
]
