
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNACION CADENA COMA COMENTARIO CORCHETE_DER CORCHETE_IZQ DIFERENTE DIVIDIR DOSPUNTOS DOSPUNTOS_IGUAL EXPONENCIACION FLECHA_HASH FLOTANTE IGUAL_IGUAL INTERROGACION LLAVE_DER LLAVE_IZQ MAS MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MENOS MODULO MULTIPLICAR NOT NUMERO OR PARENTESIS_DER PARENTESIS_IZQ PUNTO PUNTO_Y_COMA RESERVADA SIMBOLO VARIABLE_CLASE VARIABLE_GLOBAL VARIABLE_INSTANCIA VARIABLE_LOCALasignacion : variable ASIGNACION valorvariable : VARIABLE_LOCAL\n                | VARIABLE_GLOBAL\n                | VARIABLE_INSTANCIA\n                | VARIABLE_CLASEvalor : NUMERO\n            | FLOTANTE\n            | CADENAvalor : valor operador valoroperador : MAS\n                | MENOS\n                | MULTIPLICAR\n                | DIVIDIR\n                | MODULO\n                | EXPONENCIACION'
    
_lr_action_items = {'VARIABLE_LOCAL':([0,],[3,]),'VARIABLE_GLOBAL':([0,],[4,]),'VARIABLE_INSTANCIA':([0,],[5,]),'VARIABLE_CLASE':([0,],[6,]),'$end':([1,8,9,10,11,19,],[0,-1,-6,-7,-8,-9,]),'ASIGNACION':([2,3,4,5,6,],[7,-2,-3,-4,-5,]),'NUMERO':([7,12,13,14,15,16,17,18,],[9,9,-10,-11,-12,-13,-14,-15,]),'FLOTANTE':([7,12,13,14,15,16,17,18,],[10,10,-10,-11,-12,-13,-14,-15,]),'CADENA':([7,12,13,14,15,16,17,18,],[11,11,-10,-11,-12,-13,-14,-15,]),'MAS':([8,9,10,11,19,],[13,-6,-7,-8,13,]),'MENOS':([8,9,10,11,19,],[14,-6,-7,-8,14,]),'MULTIPLICAR':([8,9,10,11,19,],[15,-6,-7,-8,15,]),'DIVIDIR':([8,9,10,11,19,],[16,-6,-7,-8,16,]),'MODULO':([8,9,10,11,19,],[17,-6,-7,-8,17,]),'EXPONENCIACION':([8,9,10,11,19,],[18,-6,-7,-8,18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'asignacion':([0,],[1,]),'variable':([0,],[2,]),'valor':([7,12,],[8,19,]),'operador':([8,19,],[12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> asignacion","S'",1,None,None,None),
  ('asignacion -> variable ASIGNACION valor','asignacion',3,'p_asignacion','Analizador_Sintactico.py',5),
  ('variable -> VARIABLE_LOCAL','variable',1,'p_variable','Analizador_Sintactico.py',8),
  ('variable -> VARIABLE_GLOBAL','variable',1,'p_variable','Analizador_Sintactico.py',9),
  ('variable -> VARIABLE_INSTANCIA','variable',1,'p_variable','Analizador_Sintactico.py',10),
  ('variable -> VARIABLE_CLASE','variable',1,'p_variable','Analizador_Sintactico.py',11),
  ('valor -> NUMERO','valor',1,'p_valor','Analizador_Sintactico.py',14),
  ('valor -> FLOTANTE','valor',1,'p_valor','Analizador_Sintactico.py',15),
  ('valor -> CADENA','valor',1,'p_valor','Analizador_Sintactico.py',16),
  ('valor -> valor operador valor','valor',3,'p_valor_Operacion','Analizador_Sintactico.py',19),
  ('operador -> MAS','operador',1,'p_operador','Analizador_Sintactico.py',22),
  ('operador -> MENOS','operador',1,'p_operador','Analizador_Sintactico.py',23),
  ('operador -> MULTIPLICAR','operador',1,'p_operador','Analizador_Sintactico.py',24),
  ('operador -> DIVIDIR','operador',1,'p_operador','Analizador_Sintactico.py',25),
  ('operador -> MODULO','operador',1,'p_operador','Analizador_Sintactico.py',26),
  ('operador -> EXPONENCIACION','operador',1,'p_operador','Analizador_Sintactico.py',27),
]
