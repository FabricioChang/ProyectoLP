
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND AND_BLOCK ASIGNACION BEGIN_BLOCK BREAK CADENA CASE CLASS COMA COMENTARIO CORCHETE_DER CORCHETE_IZQ DEF DEFINED DIFERENTE DIVIDIR DO DOSPUNTOS DOSPUNTOS_IGUAL ELSE ELSIF END END_BLOCK ENSURE EXPONENCIACION FALSE FLECHA_HASH FLOTANTE IF IGUAL_IGUAL IN INTERROGACION LENGTH LLAVE_DER LLAVE_IZQ MAS MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MENOS MODULE MODULO MULTIPLICAR NEXT NOT NOT_BLOCK NUMERO OR PARENTESIS_DER PARENTESIS_IZQ PUNTO PUNTO_Y_COMA PUTS REDO RESERVADA RETRY RETURN SELF SIMBOLO SUPER THEN TRUE UNLESS UNTIL VARIABLE_CLASE VARIABLE_GLOBAL VARIABLE_INSTANCIA VARIABLE_LOCAL WHEN WHILEprograma : sentencia\n                | sentencia programasentencia : asignacion\n                | impresion\n                | array\n                | condicion\n                | funcionasignacion : variable ASIGNACION valoresimpresion : PUTS PARENTESIS_IZQ argumentos PARENTESIS_DERarray : CORCHETE_IZQ argumentos CORCHETE_DERcondicion : if\n                | if_else\n                | if_elsif_elseif : IF expresion instrucciones END_BLOCK\n            | IF expresion THEN instrucciones END_BLOCKif_else : IF expresion instrucciones ELSE instrucciones END_BLOCK\n               | IF expresion THEN instrucciones ELSE instrucciones END_BLOCKif_elsif_else : IF expresion instrucciones elsif_clauses END_BLOCK\n                     | IF expresion THEN instrucciones elsif_clauses END_BLOCK\n                     | IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK\n                     | IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCKelsif_clauses : ELSIF expresion instrucciones\n                     | ELSIF expresion THEN instrucciones\n                     | ELSIF expresion instrucciones elsif_clauses\n                     | ELSIF expresion THEN instrucciones elsif_clausesfuncion : DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCKparametros : parametro\n                  | parametro COMA parametrosparametro : VARIABLE_LOCAL\n                | emptyexpresion : var_expresion\n                | var_expresion comparadores var_expresion\n                | expresion comparadores expresion\n                | PARENTESIS_IZQ expresion PARENTESIS_DER\n                | NOT_BLOCK expresion\n                | expresion operador_logico expresioncomparadores : MAYOR_QUE\n                    | MENOR_QUE\n                    | IGUAL_IGUAL\n                    | DIFERENTE\n                    | MAYOR_IGUAL\n                    | MENOR_IGUALoperador_logico : AND\n                        | OR\n                        | NOTvar_expresion : valor\n                    | booleanoinstrucciones : instruccion\n                    | instruccion instrucciones\n                    | instruccion PUNTO_Y_COMA instruccionesinstruccion : asignacion\n                    | impresion\n                    | condicion\n                    | llamada_funcion\n                    | funcionllamada_funcion : VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER\n                       |  VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DERvariable : VARIABLE_LOCAL\n                | VARIABLE_GLOBAL\n                | VARIABLE_INSTANCIA\n                | VARIABLE_CLASEbooleano : FALSE\n                | TRUE argumentos : argumento\n                    | argumento COMA argumentosargumento : booleano\n                | operacionAritmetica\n                | array\n                | empty empty :valores : operacionAritmetica\n                | SIMBOLO\n                | booleano\n                | arrayvalor : NUMERO\n            | FLOTANTE\n            | CADENA\n            | variableoperacionAritmetica : valor \n                         | valor operador operacionAritmeticaoperador : MAS\n                | MENOS\n                | MULTIPLICAR\n                | DIVIDIR\n                | MODULO\n                | EXPONENCIACION'
    
_lr_action_items = {'PUTS':([0,2,3,4,5,6,7,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,89,90,94,95,97,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[9,9,-3,-4,-5,-6,-7,-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,9,-31,-46,-47,-8,-71,-72,-73,-74,-10,9,9,-51,-52,-53,-54,-55,-35,-9,-80,-14,9,-33,-36,9,-32,-34,9,-18,9,9,-15,9,-57,-16,9,-19,9,-56,-26,-20,-17,-21,]),'CORCHETE_IZQ':([0,2,3,4,5,6,7,10,11,12,13,15,16,17,18,21,22,29,30,31,32,33,34,35,43,44,45,46,47,49,50,82,84,89,98,104,107,115,120,123,124,127,130,],[10,10,-3,-4,-5,-6,-7,10,-11,-12,-13,-58,-59,-60,-61,10,10,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,10,-9,-80,-14,10,-18,-15,-16,-19,-26,-20,-17,-21,]),'DEF':([0,2,3,4,5,6,7,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,89,90,94,95,97,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[14,14,-3,-4,-5,-6,-7,-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,14,-31,-46,-47,-8,-71,-72,-73,-74,-10,14,14,-51,-52,-53,-54,-55,-35,-9,-80,-14,14,-33,-36,14,-32,-34,14,-18,14,14,-15,14,-57,-16,14,-19,14,-56,-26,-20,-17,-21,]),'VARIABLE_LOCAL':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,89,90,92,94,95,97,98,99,100,101,102,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[15,15,-3,-4,-5,-6,-7,15,-11,-12,-13,36,-58,-59,-60,-61,15,15,15,-62,-63,-79,-75,-76,-77,-78,78,-31,15,15,-46,-47,-8,-71,-72,-73,-74,-10,15,15,-81,-82,-83,-84,-85,-86,85,78,15,15,78,-37,-38,-39,-40,-41,-42,-43,-44,-45,-51,-52,-53,-54,-55,15,-35,-9,-80,-14,78,15,-33,-36,78,15,-32,-34,78,85,-18,78,78,-15,78,-57,-16,78,-19,78,-56,-26,-20,-17,-21,]),'VARIABLE_GLOBAL':([0,2,3,4,5,6,7,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,89,90,92,94,95,97,98,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[16,16,-3,-4,-5,-6,-7,16,-11,-12,-13,-58,-59,-60,-61,16,16,16,-62,-63,-79,-75,-76,-77,-78,16,-31,16,16,-46,-47,-8,-71,-72,-73,-74,-10,16,16,-81,-82,-83,-84,-85,-86,16,16,16,16,-37,-38,-39,-40,-41,-42,-43,-44,-45,-51,-52,-53,-54,-55,16,-35,-9,-80,-14,16,16,-33,-36,16,16,-32,-34,16,-18,16,16,-15,16,-57,-16,16,-19,16,-56,-26,-20,-17,-21,]),'VARIABLE_INSTANCIA':([0,2,3,4,5,6,7,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,89,90,92,94,95,97,98,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[17,17,-3,-4,-5,-6,-7,17,-11,-12,-13,-58,-59,-60,-61,17,17,17,-62,-63,-79,-75,-76,-77,-78,17,-31,17,17,-46,-47,-8,-71,-72,-73,-74,-10,17,17,-81,-82,-83,-84,-85,-86,17,17,17,17,-37,-38,-39,-40,-41,-42,-43,-44,-45,-51,-52,-53,-54,-55,17,-35,-9,-80,-14,17,17,-33,-36,17,17,-32,-34,17,-18,17,17,-15,17,-57,-16,17,-19,17,-56,-26,-20,-17,-21,]),'VARIABLE_CLASE':([0,2,3,4,5,6,7,10,11,12,13,15,16,17,18,19,21,22,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,84,89,90,92,94,95,97,98,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[18,18,-3,-4,-5,-6,-7,18,-11,-12,-13,-58,-59,-60,-61,18,18,18,-62,-63,-79,-75,-76,-77,-78,18,-31,18,18,-46,-47,-8,-71,-72,-73,-74,-10,18,18,-81,-82,-83,-84,-85,-86,18,18,18,18,-37,-38,-39,-40,-41,-42,-43,-44,-45,-51,-52,-53,-54,-55,18,-35,-9,-80,-14,18,18,-33,-36,18,18,-32,-34,18,-18,18,18,-15,18,-57,-16,18,-19,18,-56,-26,-20,-17,-21,]),'IF':([0,2,3,4,5,6,7,11,12,13,15,16,17,18,29,30,31,32,33,34,35,37,38,41,42,43,44,45,46,47,49,60,63,73,74,75,76,77,81,82,84,89,90,94,95,97,99,100,101,104,105,106,107,108,112,115,118,120,121,122,123,124,127,130,],[19,19,-3,-4,-5,-6,-7,-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,19,-31,-46,-47,-8,-71,-72,-73,-74,-10,19,19,-51,-52,-53,-54,-55,-35,-9,-80,-14,19,-33,-36,19,-32,-34,19,-18,19,19,-15,19,-57,-16,19,-19,19,-56,-26,-20,-17,-21,]),'$end':([1,2,3,4,5,6,7,11,12,13,15,16,17,18,20,29,30,31,32,33,34,35,43,44,45,46,47,49,82,84,89,104,107,115,120,123,124,127,130,],[0,-1,-3,-4,-5,-6,-7,-11,-12,-13,-58,-59,-60,-61,-2,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,-9,-80,-14,-18,-15,-16,-19,-26,-20,-17,-21,]),'ASIGNACION':([8,15,16,17,18,78,],[21,-58,-59,-60,-61,-58,]),'PARENTESIS_IZQ':([9,19,36,39,40,61,62,64,65,66,67,68,69,70,71,72,78,92,],[22,39,58,39,39,39,39,-37,-38,-39,-40,-41,-42,-43,-44,-45,98,39,]),'FALSE':([10,19,21,22,39,40,50,61,62,64,65,66,67,68,69,70,71,72,79,92,98,],[29,29,29,29,29,29,29,29,29,-37,-38,-39,-40,-41,-42,-43,-44,-45,29,29,29,]),'TRUE':([10,19,21,22,39,40,50,61,62,64,65,66,67,68,69,70,71,72,79,92,98,],[30,30,30,30,30,30,30,30,30,-37,-38,-39,-40,-41,-42,-43,-44,-45,30,30,30,]),'COMA':([10,15,16,17,18,22,24,25,26,27,28,29,30,31,32,33,34,35,49,50,58,84,85,87,88,98,102,],[-70,-58,-59,-60,-61,-70,50,-66,-67,-68,-69,-62,-63,-79,-75,-76,-77,-78,-10,-70,-70,-80,-29,102,-30,-70,-70,]),'CORCHETE_DER':([10,15,16,17,18,23,24,25,26,27,28,29,30,31,32,33,34,35,49,50,83,84,],[-70,-58,-59,-60,-61,49,-64,-66,-67,-68,-69,-62,-63,-79,-75,-76,-77,-78,-10,-70,-65,-80,]),'NUMERO':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,92,98,],[32,32,32,32,32,32,32,32,-81,-82,-83,-84,-85,-86,32,32,-37,-38,-39,-40,-41,-42,-43,-44,-45,32,32,32,]),'FLOTANTE':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,92,98,],[33,33,33,33,33,33,33,33,-81,-82,-83,-84,-85,-86,33,33,-37,-38,-39,-40,-41,-42,-43,-44,-45,33,33,33,]),'CADENA':([10,19,21,22,39,40,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,79,92,98,],[34,34,34,34,34,34,34,34,-81,-82,-83,-84,-85,-86,34,34,-37,-38,-39,-40,-41,-42,-43,-44,-45,34,34,34,]),'PUNTO_Y_COMA':([11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,63,73,74,75,76,77,82,84,89,104,107,112,115,120,122,123,124,127,130,],[-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,97,-51,-52,-53,-54,-55,-9,-80,-14,-18,-15,-57,-16,-19,-56,-26,-20,-17,-21,]),'END_BLOCK':([11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,89,91,93,96,103,104,107,109,110,112,113,115,116,117,119,120,122,123,124,125,126,127,128,129,130,],[-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,89,-48,-51,-52,-53,-54,-55,-9,-80,-14,104,107,-49,115,-18,-15,120,-50,-57,123,-16,124,-22,127,-19,-56,-26,-20,-24,-23,-17,130,-25,-21,]),'ELSE':([11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,89,91,93,96,104,107,109,110,112,115,117,120,122,123,124,125,126,127,129,130,],[-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,90,-48,-51,-52,-53,-54,-55,-9,-80,-14,105,108,-49,-18,-15,121,-50,-57,-16,-22,-19,-56,-26,-20,-24,-23,-17,-25,-21,]),'ELSIF':([11,12,13,15,16,17,18,29,30,31,32,33,34,35,43,44,45,46,47,49,59,63,73,74,75,76,77,82,84,89,93,96,104,107,110,112,115,117,120,122,123,124,126,127,130,],[-11,-12,-13,-58,-59,-60,-61,-62,-63,-79,-75,-76,-77,-78,-8,-71,-72,-73,-74,-10,92,-48,-51,-52,-53,-54,-55,-9,-80,-14,92,-49,-18,-15,-50,-57,-16,92,-19,-56,-26,-20,92,-17,-21,]),'MAS':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,52,-75,-76,-77,-78,]),'MENOS':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,53,-75,-76,-77,-78,]),'MULTIPLICAR':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,54,-75,-76,-77,-78,]),'DIVIDIR':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,55,-75,-76,-77,-78,]),'MODULO':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,56,-75,-76,-77,-78,]),'EXPONENCIACION':([15,16,17,18,31,32,33,34,35,],[-58,-59,-60,-61,57,-75,-76,-77,-78,]),'MAYOR_QUE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,64,64,-46,-47,64,64,64,64,-32,-34,64,]),'MENOR_QUE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,65,65,-46,-47,65,65,65,65,-32,-34,65,]),'IGUAL_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,66,66,-46,-47,66,66,66,66,-32,-34,66,]),'DIFERENTE':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,67,67,-46,-47,67,67,67,67,-32,-34,67,]),'MAYOR_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,68,68,-46,-47,68,68,68,68,-32,-34,68,]),'MENOR_IGUAL':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,69,69,-46,-47,69,69,69,69,-32,-34,69,]),'THEN':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,60,-31,-46,-47,-35,-33,-36,-32,-34,118,]),'AND':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,70,-31,-46,-47,70,70,70,70,-32,-34,70,]),'OR':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,71,-31,-46,-47,71,71,71,71,-32,-34,71,]),'NOT':([15,16,17,18,29,30,32,33,34,35,37,38,41,42,80,81,94,95,99,100,106,],[-58,-59,-60,-61,-62,-63,-75,-76,-77,-78,72,-31,-46,-47,72,72,72,72,-32,-34,72,]),'PARENTESIS_DER':([15,16,17,18,22,24,25,26,27,28,29,30,31,32,33,34,35,38,41,42,48,49,50,58,80,81,83,84,85,86,87,88,94,95,98,99,100,102,111,114,],[-58,-59,-60,-61,-70,-64,-66,-67,-68,-69,-62,-63,-79,-75,-76,-77,-78,-31,-46,-47,82,-10,-70,-70,100,-35,-65,-80,-29,101,-27,-30,-33,-36,112,-32,-34,-70,122,-28,]),'NOT_BLOCK':([19,39,40,61,62,64,65,66,67,68,69,70,71,72,92,],[40,40,40,40,40,-37,-38,-39,-40,-41,-42,-43,-44,-45,40,]),'SIMBOLO':([21,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,20,]),'sentencia':([0,2,],[2,2,]),'asignacion':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[3,3,73,73,73,73,73,73,73,73,73,73,73,]),'impresion':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[4,4,74,74,74,74,74,74,74,74,74,74,74,]),'array':([0,2,10,21,22,50,98,],[5,5,27,47,27,27,27,]),'condicion':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[6,6,75,75,75,75,75,75,75,75,75,75,75,]),'funcion':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[7,7,77,77,77,77,77,77,77,77,77,77,77,]),'variable':([0,2,10,19,21,22,37,39,40,50,51,60,61,62,63,79,90,92,97,98,101,105,106,108,118,121,],[8,8,35,35,35,35,8,35,35,35,35,8,35,35,8,35,8,35,8,35,8,8,8,8,8,8,]),'if':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'if_else':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if_elsif_else':([0,2,37,60,63,90,97,101,105,106,108,118,121,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'argumentos':([10,22,50,98,],[23,48,83,111,]),'argumento':([10,22,50,98,],[24,24,24,24,]),'booleano':([10,19,21,22,39,40,50,61,62,79,92,98,],[25,42,46,25,42,42,25,42,42,42,42,25,]),'operacionAritmetica':([10,21,22,50,51,98,],[26,44,26,26,84,26,]),'empty':([10,22,50,58,98,102,],[28,28,28,88,28,88,]),'valor':([10,19,21,22,39,40,50,51,61,62,79,92,98,],[31,41,31,31,41,41,31,31,41,41,41,41,31,]),'expresion':([19,39,40,61,62,92,],[37,80,81,94,95,106,]),'var_expresion':([19,39,40,61,62,79,92,],[38,38,38,38,38,99,38,]),'valores':([21,],[43,]),'operador':([31,],[51,]),'instrucciones':([37,60,63,90,97,101,105,106,108,118,121,],[59,93,96,103,110,113,116,117,119,126,128,]),'comparadores':([37,38,80,81,94,95,106,],[61,79,61,61,61,61,61,]),'operador_logico':([37,80,81,94,95,106,],[62,62,62,62,62,62,]),'instruccion':([37,60,63,90,97,101,105,106,108,118,121,],[63,63,63,63,63,63,63,63,63,63,63,]),'llamada_funcion':([37,60,63,90,97,101,105,106,108,118,121,],[76,76,76,76,76,76,76,76,76,76,76,]),'parametros':([58,102,],[86,114,]),'parametro':([58,102,],[87,87,]),'elsif_clauses':([59,93,117,126,],[91,109,125,129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> sentencia','programa',1,'p_programa','Analizador_Sintactico.py',5),
  ('programa -> sentencia programa','programa',2,'p_programa','Analizador_Sintactico.py',6),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',9),
  ('sentencia -> impresion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',10),
  ('sentencia -> array','sentencia',1,'p_sentencia','Analizador_Sintactico.py',11),
  ('sentencia -> condicion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',12),
  ('sentencia -> funcion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',13),
  ('asignacion -> variable ASIGNACION valores','asignacion',3,'p_asignacion','Analizador_Sintactico.py',16),
  ('impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER','impresion',4,'p_impresion','Analizador_Sintactico.py',20),
  ('array -> CORCHETE_IZQ argumentos CORCHETE_DER','array',3,'p_array','Analizador_Sintactico.py',25),
  ('condicion -> if','condicion',1,'p_condicion','Analizador_Sintactico.py',29),
  ('condicion -> if_else','condicion',1,'p_condicion','Analizador_Sintactico.py',30),
  ('condicion -> if_elsif_else','condicion',1,'p_condicion','Analizador_Sintactico.py',31),
  ('if -> IF expresion instrucciones END_BLOCK','if',4,'p_if','Analizador_Sintactico.py',34),
  ('if -> IF expresion THEN instrucciones END_BLOCK','if',5,'p_if','Analizador_Sintactico.py',35),
  ('if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK','if_else',6,'p_if_else','Analizador_Sintactico.py',38),
  ('if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK','if_else',7,'p_if_else','Analizador_Sintactico.py',39),
  ('if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK','if_elsif_else',5,'p_if_elsif_else','Analizador_Sintactico.py',42),
  ('if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK','if_elsif_else',6,'p_if_elsif_else','Analizador_Sintactico.py',43),
  ('if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK','if_elsif_else',7,'p_if_elsif_else','Analizador_Sintactico.py',44),
  ('if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK','if_elsif_else',8,'p_if_elsif_else','Analizador_Sintactico.py',45),
  ('elsif_clauses -> ELSIF expresion instrucciones','elsif_clauses',3,'p_elsif_clauses','Analizador_Sintactico.py',48),
  ('elsif_clauses -> ELSIF expresion THEN instrucciones','elsif_clauses',4,'p_elsif_clauses','Analizador_Sintactico.py',49),
  ('elsif_clauses -> ELSIF expresion instrucciones elsif_clauses','elsif_clauses',4,'p_elsif_clauses','Analizador_Sintactico.py',50),
  ('elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses','elsif_clauses',5,'p_elsif_clauses','Analizador_Sintactico.py',51),
  ('funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK','funcion',7,'p_funcion','Analizador_Sintactico.py',55),
  ('parametros -> parametro','parametros',1,'p_parametros','Analizador_Sintactico.py',58),
  ('parametros -> parametro COMA parametros','parametros',3,'p_parametros','Analizador_Sintactico.py',59),
  ('parametro -> VARIABLE_LOCAL','parametro',1,'p_parametro','Analizador_Sintactico.py',62),
  ('parametro -> empty','parametro',1,'p_parametro','Analizador_Sintactico.py',63),
  ('expresion -> var_expresion','expresion',1,'p_expresion','Analizador_Sintactico.py',67),
  ('expresion -> var_expresion comparadores var_expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',68),
  ('expresion -> expresion comparadores expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',69),
  ('expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER','expresion',3,'p_expresion','Analizador_Sintactico.py',70),
  ('expresion -> NOT_BLOCK expresion','expresion',2,'p_expresion','Analizador_Sintactico.py',71),
  ('expresion -> expresion operador_logico expresion','expresion',3,'p_expresion','Analizador_Sintactico.py',72),
  ('comparadores -> MAYOR_QUE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',75),
  ('comparadores -> MENOR_QUE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',76),
  ('comparadores -> IGUAL_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',77),
  ('comparadores -> DIFERENTE','comparadores',1,'p_comparadores','Analizador_Sintactico.py',78),
  ('comparadores -> MAYOR_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',79),
  ('comparadores -> MENOR_IGUAL','comparadores',1,'p_comparadores','Analizador_Sintactico.py',80),
  ('operador_logico -> AND','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',83),
  ('operador_logico -> OR','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',84),
  ('operador_logico -> NOT','operador_logico',1,'p_operador_logico','Analizador_Sintactico.py',85),
  ('var_expresion -> valor','var_expresion',1,'p_var_expresion','Analizador_Sintactico.py',88),
  ('var_expresion -> booleano','var_expresion',1,'p_var_expresion','Analizador_Sintactico.py',89),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','Analizador_Sintactico.py',92),
  ('instrucciones -> instruccion instrucciones','instrucciones',2,'p_instrucciones','Analizador_Sintactico.py',93),
  ('instrucciones -> instruccion PUNTO_Y_COMA instrucciones','instrucciones',3,'p_instrucciones','Analizador_Sintactico.py',94),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',97),
  ('instruccion -> impresion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',98),
  ('instruccion -> condicion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',99),
  ('instruccion -> llamada_funcion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',100),
  ('instruccion -> funcion','instruccion',1,'p_instruccion','Analizador_Sintactico.py',101),
  ('llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER','llamada_funcion',4,'p_llamada_funcion','Analizador_Sintactico.py',104),
  ('llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER','llamada_funcion',3,'p_llamada_funcion','Analizador_Sintactico.py',105),
  ('variable -> VARIABLE_LOCAL','variable',1,'p_variable','Analizador_Sintactico.py',109),
  ('variable -> VARIABLE_GLOBAL','variable',1,'p_variable','Analizador_Sintactico.py',110),
  ('variable -> VARIABLE_INSTANCIA','variable',1,'p_variable','Analizador_Sintactico.py',111),
  ('variable -> VARIABLE_CLASE','variable',1,'p_variable','Analizador_Sintactico.py',112),
  ('booleano -> FALSE','booleano',1,'p_booleano','Analizador_Sintactico.py',115),
  ('booleano -> TRUE','booleano',1,'p_booleano','Analizador_Sintactico.py',116),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','Analizador_Sintactico.py',119),
  ('argumentos -> argumento COMA argumentos','argumentos',3,'p_argumentos','Analizador_Sintactico.py',120),
  ('argumento -> booleano','argumento',1,'p_argumento','Analizador_Sintactico.py',123),
  ('argumento -> operacionAritmetica','argumento',1,'p_argumento','Analizador_Sintactico.py',124),
  ('argumento -> array','argumento',1,'p_argumento','Analizador_Sintactico.py',125),
  ('argumento -> empty','argumento',1,'p_argumento','Analizador_Sintactico.py',126),
  ('empty -> <empty>','empty',0,'p_empty','Analizador_Sintactico.py',129),
  ('valores -> operacionAritmetica','valores',1,'p_valores','Analizador_Sintactico.py',132),
  ('valores -> SIMBOLO','valores',1,'p_valores','Analizador_Sintactico.py',133),
  ('valores -> booleano','valores',1,'p_valores','Analizador_Sintactico.py',134),
  ('valores -> array','valores',1,'p_valores','Analizador_Sintactico.py',135),
  ('valor -> NUMERO','valor',1,'p_valor','Analizador_Sintactico.py',138),
  ('valor -> FLOTANTE','valor',1,'p_valor','Analizador_Sintactico.py',139),
  ('valor -> CADENA','valor',1,'p_valor','Analizador_Sintactico.py',140),
  ('valor -> variable','valor',1,'p_valor','Analizador_Sintactico.py',141),
  ('operacionAritmetica -> valor','operacionAritmetica',1,'p_operacionAritmetica','Analizador_Sintactico.py',144),
  ('operacionAritmetica -> valor operador operacionAritmetica','operacionAritmetica',3,'p_operacionAritmetica','Analizador_Sintactico.py',145),
  ('operador -> MAS','operador',1,'p_operador','Analizador_Sintactico.py',149),
  ('operador -> MENOS','operador',1,'p_operador','Analizador_Sintactico.py',150),
  ('operador -> MULTIPLICAR','operador',1,'p_operador','Analizador_Sintactico.py',151),
  ('operador -> DIVIDIR','operador',1,'p_operador','Analizador_Sintactico.py',152),
  ('operador -> MODULO','operador',1,'p_operador','Analizador_Sintactico.py',153),
  ('operador -> EXPONENCIACION','operador',1,'p_operador','Analizador_Sintactico.py',154),
]
