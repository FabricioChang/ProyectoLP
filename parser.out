Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND_BLOCK
    BEGIN_BLOCK
    BREAK
    CASE
    CLASS
    COMENTARIO
    DEFINED
    DOSPUNTOS
    DOSPUNTOS_IGUAL
    END
    ENSURE
    IN
    INTERROGACION
    LENGTH
    MODULE
    NEXT
    PUNTO
    REDO
    RESERVADA
    RETRY
    RETURN
    SELF
    SUPER
    UNLESS
    WHEN
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencia
Rule 2     programa -> sentencia programa
Rule 3     sentencia -> asignacion
Rule 4     sentencia -> impresion
Rule 5     sentencia -> array
Rule 6     sentencia -> condicion
Rule 7     sentencia -> funcion
Rule 8     asignacion -> variable ASIGNACION valores
Rule 9     solicitud_datos -> VARIABLE_LOCAL ASIGNACION GETS PARENTESIS_IZQ PARENTESIS_DER
Rule 10    impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
Rule 11    impresion -> PUTS
Rule 12    array -> CORCHETE_IZQ argumentos CORCHETE_DER
Rule 13    condicion -> if
Rule 14    condicion -> if_else
Rule 15    condicion -> if_elsif_else
Rule 16    if -> IF expresion instrucciones END_BLOCK
Rule 17    if -> IF expresion THEN instrucciones END_BLOCK
Rule 18    if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK
Rule 19    if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
Rule 20    if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK
Rule 21    if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK
Rule 22    if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
Rule 23    if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
Rule 24    elsif_clauses -> ELSIF expresion instrucciones
Rule 25    elsif_clauses -> ELSIF expresion THEN instrucciones
Rule 26    elsif_clauses -> ELSIF expresion instrucciones elsif_clauses
Rule 27    elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses
Rule 28    funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
Rule 29    parametros -> parametro
Rule 30    parametros -> parametro COMA parametros
Rule 31    parametro -> VARIABLE_LOCAL
Rule 32    parametro -> empty
Rule 33    expresion -> var_expresion
Rule 34    expresion -> var_expresion comparadores var_expresion
Rule 35    expresion -> expresion comparadores expresion
Rule 36    expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER
Rule 37    expresion -> NOT_BLOCK expresion
Rule 38    expresion -> expresion operador_logico expresion
Rule 39    comparadores -> MAYOR_QUE
Rule 40    comparadores -> MENOR_QUE
Rule 41    comparadores -> IGUAL_IGUAL
Rule 42    comparadores -> DIFERENTE
Rule 43    comparadores -> MAYOR_IGUAL
Rule 44    comparadores -> MENOR_IGUAL
Rule 45    operador_logico -> AND
Rule 46    operador_logico -> OR
Rule 47    operador_logico -> NOT
Rule 48    var_expresion -> valor
Rule 49    var_expresion -> booleano
Rule 50    instrucciones -> instruccion
Rule 51    instrucciones -> instruccion instrucciones
Rule 52    instrucciones -> instruccion PUNTO_Y_COMA instrucciones
Rule 53    instruccion -> asignacion
Rule 54    instruccion -> impresion
Rule 55    instruccion -> condicion
Rule 56    instruccion -> llamada_funcion
Rule 57    instruccion -> funcion
Rule 58    llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
Rule 59    llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
Rule 60    variable -> VARIABLE_LOCAL
Rule 61    variable -> VARIABLE_GLOBAL
Rule 62    variable -> VARIABLE_INSTANCIA
Rule 63    variable -> VARIABLE_CLASE
Rule 64    booleano -> FALSE
Rule 65    booleano -> TRUE
Rule 66    argumentos -> argumento
Rule 67    argumentos -> argumento COMA argumentos
Rule 68    argumento -> booleano
Rule 69    argumento -> operacionAritmetica
Rule 70    argumento -> array
Rule 71    argumento -> empty
Rule 72    empty -> <empty>
Rule 73    valores -> operacionAritmetica
Rule 74    valores -> SIMBOLO
Rule 75    valores -> booleano
Rule 76    valores -> array
Rule 77    valor -> NUMERO
Rule 78    valor -> FLOTANTE
Rule 79    valor -> CADENA
Rule 80    valor -> variable
Rule 81    operacionAritmetica -> valor
Rule 82    operacionAritmetica -> valor operador operacionAritmetica
Rule 83    operador -> MAS
Rule 84    operador -> MENOS
Rule 85    operador -> MULTIPLICAR
Rule 86    operador -> DIVIDIR
Rule 87    operador -> MODULO
Rule 88    operador -> EXPONENCIACION
Rule 89    hash -> LLAVE_IZQ pares LLAVE_DER
Rule 90    pares -> par
Rule 91    pares -> par COMA pares
Rule 92    par -> valor FLECHA_HASH valor
Rule 93    until -> UNTIL expresion DO instrucciones END_BLOCK
Rule 94    until -> UNTIL expresion instrucciones END_BLOCK
Rule 95    funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
Rule 96    parametros_defecto -> parametro_defecto
Rule 97    parametros_defecto -> parametro_defecto COMA parametros_defecto
Rule 98    parametro_defecto -> VARIABLE_LOCAL
Rule 99    parametro_defecto -> VARIABLE_LOCAL ASIGNACION valor
Rule 100   cadena_interpolacion -> CADENA LLAVE_IZQ variable LLAVE_DER
Rule 101   incremento -> VARIABLE_LOCAL MAS ASIGNACION expresion

Terminals, with rules where they appear

ALIAS                : 
AND                  : 45
AND_BLOCK            : 
ASIGNACION           : 8 9 99 101
BEGIN_BLOCK          : 
BREAK                : 
CADENA               : 79 100
CASE                 : 
CLASS                : 
COMA                 : 30 67 91 97
COMENTARIO           : 
CORCHETE_DER         : 12
CORCHETE_IZQ         : 12
DEF                  : 28 95
DEFINED              : 
DIFERENTE            : 42
DIVIDIR              : 86
DO                   : 93
DOSPUNTOS            : 
DOSPUNTOS_IGUAL      : 
ELSE                 : 18 19 22 23
ELSIF                : 24 25 26 27
END                  : 
END_BLOCK            : 16 17 18 19 20 21 22 23 28 93 94 95
ENSURE               : 
EXPONENCIACION       : 88
FALSE                : 64
FLECHA_HASH          : 92
FLOTANTE             : 78
GETS                 : 9
IF                   : 16 17 18 19 20 21 22 23
IGUAL_IGUAL          : 41
IN                   : 
INTERROGACION        : 
LENGTH               : 
LLAVE_DER            : 89 100
LLAVE_IZQ            : 89 100
MAS                  : 83 101
MAYOR_IGUAL          : 43
MAYOR_QUE            : 39
MENOR_IGUAL          : 44
MENOR_QUE            : 40
MENOS                : 84
MODULE               : 
MODULO               : 87
MULTIPLICAR          : 85
NEXT                 : 
NOT                  : 47
NOT_BLOCK            : 37
NUMERO               : 77
OR                   : 46
PARENTESIS_DER       : 9 10 28 36 58 59 95
PARENTESIS_IZQ       : 9 10 28 36 58 59 95
PUNTO                : 
PUNTO_Y_COMA         : 52
PUTS                 : 10 11
REDO                 : 
RESERVADA            : 
RETRY                : 
RETURN               : 
SELF                 : 
SIMBOLO              : 74
SUPER                : 
THEN                 : 17 19 21 23 25 27
TRUE                 : 65
UNLESS               : 
UNTIL                : 93 94
VARIABLE_CLASE       : 63
VARIABLE_GLOBAL      : 61
VARIABLE_INSTANCIA   : 62
VARIABLE_LOCAL       : 9 28 31 58 59 60 95 98 99 101
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

argumento            : 66 67
argumentos           : 10 12 58 67
array                : 5 70 76
asignacion           : 3 53
booleano             : 49 68 75
cadena_interpolacion : 
comparadores         : 34 35
condicion            : 6 55
elsif_clauses        : 20 21 22 23 26 27
empty                : 32 71
expresion            : 16 17 18 19 20 21 22 23 24 25 26 27 35 35 36 37 38 38 93 94 101
funcion              : 7 57
hash                 : 
if                   : 13
if_else              : 14
if_elsif_else        : 15
impresion            : 4 54
incremento           : 
instruccion          : 50 51 52
instrucciones        : 16 17 18 18 19 19 20 21 22 22 23 23 24 25 26 27 28 51 52 93 94 95
llamada_funcion      : 56
operacionAritmetica  : 69 73 82
operador             : 82
operador_logico      : 38
par                  : 90 91
parametro            : 29 30
parametro_defecto    : 96 97
parametros           : 28 30
parametros_defecto   : 95 97
pares                : 89 91
programa             : 2 0
sentencia            : 1 2
solicitud_datos      : 
until                : 
valor                : 48 81 82 92 92 99
valores              : 8
var_expresion        : 33 34 34
variable             : 8 80 100

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencia
    (2) programa -> . sentencia programa
    (3) sentencia -> . asignacion
    (4) sentencia -> . impresion
    (5) sentencia -> . array
    (6) sentencia -> . condicion
    (7) sentencia -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    CORCHETE_IZQ    shift and go to state 10
    DEF             shift and go to state 14
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    programa                       shift and go to state 1
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    array                          shift and go to state 5
    condicion                      shift and go to state 6
    funcion                        shift and go to state 7
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencia .
    (2) programa -> sentencia . programa
    (1) programa -> . sentencia
    (2) programa -> . sentencia programa
    (3) sentencia -> . asignacion
    (4) sentencia -> . impresion
    (5) sentencia -> . array
    (6) sentencia -> . condicion
    (7) sentencia -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    $end            reduce using rule 1 (programa -> sentencia .)
    PUTS            shift and go to state 9
    CORCHETE_IZQ    shift and go to state 10
    DEF             shift and go to state 14
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    sentencia                      shift and go to state 2
    programa                       shift and go to state 20
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    array                          shift and go to state 5
    condicion                      shift and go to state 6
    funcion                        shift and go to state 7
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 3

    (3) sentencia -> asignacion .

    PUTS            reduce using rule 3 (sentencia -> asignacion .)
    CORCHETE_IZQ    reduce using rule 3 (sentencia -> asignacion .)
    DEF             reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_LOCAL  reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_GLOBAL reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_INSTANCIA reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_CLASE  reduce using rule 3 (sentencia -> asignacion .)
    IF              reduce using rule 3 (sentencia -> asignacion .)
    $end            reduce using rule 3 (sentencia -> asignacion .)


state 4

    (4) sentencia -> impresion .

    PUTS            reduce using rule 4 (sentencia -> impresion .)
    CORCHETE_IZQ    reduce using rule 4 (sentencia -> impresion .)
    DEF             reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_LOCAL  reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_GLOBAL reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_INSTANCIA reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_CLASE  reduce using rule 4 (sentencia -> impresion .)
    IF              reduce using rule 4 (sentencia -> impresion .)
    $end            reduce using rule 4 (sentencia -> impresion .)


state 5

    (5) sentencia -> array .

    PUTS            reduce using rule 5 (sentencia -> array .)
    CORCHETE_IZQ    reduce using rule 5 (sentencia -> array .)
    DEF             reduce using rule 5 (sentencia -> array .)
    VARIABLE_LOCAL  reduce using rule 5 (sentencia -> array .)
    VARIABLE_GLOBAL reduce using rule 5 (sentencia -> array .)
    VARIABLE_INSTANCIA reduce using rule 5 (sentencia -> array .)
    VARIABLE_CLASE  reduce using rule 5 (sentencia -> array .)
    IF              reduce using rule 5 (sentencia -> array .)
    $end            reduce using rule 5 (sentencia -> array .)


state 6

    (6) sentencia -> condicion .

    PUTS            reduce using rule 6 (sentencia -> condicion .)
    CORCHETE_IZQ    reduce using rule 6 (sentencia -> condicion .)
    DEF             reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_LOCAL  reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_GLOBAL reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_INSTANCIA reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_CLASE  reduce using rule 6 (sentencia -> condicion .)
    IF              reduce using rule 6 (sentencia -> condicion .)
    $end            reduce using rule 6 (sentencia -> condicion .)


state 7

    (7) sentencia -> funcion .

    PUTS            reduce using rule 7 (sentencia -> funcion .)
    CORCHETE_IZQ    reduce using rule 7 (sentencia -> funcion .)
    DEF             reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_LOCAL  reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_GLOBAL reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_INSTANCIA reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_CLASE  reduce using rule 7 (sentencia -> funcion .)
    IF              reduce using rule 7 (sentencia -> funcion .)
    $end            reduce using rule 7 (sentencia -> funcion .)


state 8

    (8) asignacion -> variable . ASIGNACION valores

    ASIGNACION      shift and go to state 21


state 9

    (10) impresion -> PUTS . PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> PUTS .

    PARENTESIS_IZQ  shift and go to state 22
    PUTS            reduce using rule 11 (impresion -> PUTS .)
    CORCHETE_IZQ    reduce using rule 11 (impresion -> PUTS .)
    DEF             reduce using rule 11 (impresion -> PUTS .)
    VARIABLE_LOCAL  reduce using rule 11 (impresion -> PUTS .)
    VARIABLE_GLOBAL reduce using rule 11 (impresion -> PUTS .)
    VARIABLE_INSTANCIA reduce using rule 11 (impresion -> PUTS .)
    VARIABLE_CLASE  reduce using rule 11 (impresion -> PUTS .)
    IF              reduce using rule 11 (impresion -> PUTS .)
    $end            reduce using rule 11 (impresion -> PUTS .)
    PUNTO_Y_COMA    reduce using rule 11 (impresion -> PUTS .)
    END_BLOCK       reduce using rule 11 (impresion -> PUTS .)
    ELSE            reduce using rule 11 (impresion -> PUTS .)
    ELSIF           reduce using rule 11 (impresion -> PUTS .)


state 10

    (12) array -> CORCHETE_IZQ . argumentos CORCHETE_DER
    (66) argumentos -> . argumento
    (67) argumentos -> . argumento COMA argumentos
    (68) argumento -> . booleano
    (69) argumento -> . operacionAritmetica
    (70) argumento -> . array
    (71) argumento -> . empty
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (72) empty -> .
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 72 (empty -> .)
    CORCHETE_DER    reduce using rule 72 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumentos                     shift and go to state 23
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 11

    (13) condicion -> if .

    PUTS            reduce using rule 13 (condicion -> if .)
    CORCHETE_IZQ    reduce using rule 13 (condicion -> if .)
    DEF             reduce using rule 13 (condicion -> if .)
    VARIABLE_LOCAL  reduce using rule 13 (condicion -> if .)
    VARIABLE_GLOBAL reduce using rule 13 (condicion -> if .)
    VARIABLE_INSTANCIA reduce using rule 13 (condicion -> if .)
    VARIABLE_CLASE  reduce using rule 13 (condicion -> if .)
    IF              reduce using rule 13 (condicion -> if .)
    $end            reduce using rule 13 (condicion -> if .)
    PUNTO_Y_COMA    reduce using rule 13 (condicion -> if .)
    END_BLOCK       reduce using rule 13 (condicion -> if .)
    ELSE            reduce using rule 13 (condicion -> if .)
    ELSIF           reduce using rule 13 (condicion -> if .)


state 12

    (14) condicion -> if_else .

    PUTS            reduce using rule 14 (condicion -> if_else .)
    CORCHETE_IZQ    reduce using rule 14 (condicion -> if_else .)
    DEF             reduce using rule 14 (condicion -> if_else .)
    VARIABLE_LOCAL  reduce using rule 14 (condicion -> if_else .)
    VARIABLE_GLOBAL reduce using rule 14 (condicion -> if_else .)
    VARIABLE_INSTANCIA reduce using rule 14 (condicion -> if_else .)
    VARIABLE_CLASE  reduce using rule 14 (condicion -> if_else .)
    IF              reduce using rule 14 (condicion -> if_else .)
    $end            reduce using rule 14 (condicion -> if_else .)
    PUNTO_Y_COMA    reduce using rule 14 (condicion -> if_else .)
    END_BLOCK       reduce using rule 14 (condicion -> if_else .)
    ELSE            reduce using rule 14 (condicion -> if_else .)
    ELSIF           reduce using rule 14 (condicion -> if_else .)


state 13

    (15) condicion -> if_elsif_else .

    PUTS            reduce using rule 15 (condicion -> if_elsif_else .)
    CORCHETE_IZQ    reduce using rule 15 (condicion -> if_elsif_else .)
    DEF             reduce using rule 15 (condicion -> if_elsif_else .)
    VARIABLE_LOCAL  reduce using rule 15 (condicion -> if_elsif_else .)
    VARIABLE_GLOBAL reduce using rule 15 (condicion -> if_elsif_else .)
    VARIABLE_INSTANCIA reduce using rule 15 (condicion -> if_elsif_else .)
    VARIABLE_CLASE  reduce using rule 15 (condicion -> if_elsif_else .)
    IF              reduce using rule 15 (condicion -> if_elsif_else .)
    $end            reduce using rule 15 (condicion -> if_elsif_else .)
    PUNTO_Y_COMA    reduce using rule 15 (condicion -> if_elsif_else .)
    END_BLOCK       reduce using rule 15 (condicion -> if_elsif_else .)
    ELSE            reduce using rule 15 (condicion -> if_elsif_else .)
    ELSIF           reduce using rule 15 (condicion -> if_elsif_else .)


state 14

    (28) funcion -> DEF . VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> DEF . VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK

    VARIABLE_LOCAL  shift and go to state 36


state 15

    (60) variable -> VARIABLE_LOCAL .

    ASIGNACION      reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MAS             reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MENOS           reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MULTIPLICAR     reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    DIVIDIR         reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MODULO          reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    EXPONENCIACION  reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    COMA            reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    CORCHETE_DER    reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MAYOR_QUE       reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MENOR_QUE       reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    IGUAL_IGUAL     reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    DIFERENTE       reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MAYOR_IGUAL     reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    MENOR_IGUAL     reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    THEN            reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    AND             reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    OR              reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    NOT             reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    PUTS            reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    VARIABLE_LOCAL  reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    DEF             reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    VARIABLE_GLOBAL reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    VARIABLE_INSTANCIA reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    VARIABLE_CLASE  reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    IF              reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    CORCHETE_IZQ    reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    $end            reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    PUNTO_Y_COMA    reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    END_BLOCK       reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    ELSE            reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    ELSIF           reduce using rule 60 (variable -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 60 (variable -> VARIABLE_LOCAL .)


state 16

    (61) variable -> VARIABLE_GLOBAL .

    ASIGNACION      reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MAS             reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MENOS           reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MULTIPLICAR     reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    DIVIDIR         reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MODULO          reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    EXPONENCIACION  reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    COMA            reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    CORCHETE_DER    reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MAYOR_QUE       reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MENOR_QUE       reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    IGUAL_IGUAL     reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    DIFERENTE       reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MAYOR_IGUAL     reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    MENOR_IGUAL     reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    THEN            reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    AND             reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    OR              reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    NOT             reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    PUTS            reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_LOCAL  reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    DEF             reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_GLOBAL reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_INSTANCIA reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_CLASE  reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    IF              reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    CORCHETE_IZQ    reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    $end            reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    PUNTO_Y_COMA    reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    END_BLOCK       reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    ELSE            reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    ELSIF           reduce using rule 61 (variable -> VARIABLE_GLOBAL .)
    PARENTESIS_DER  reduce using rule 61 (variable -> VARIABLE_GLOBAL .)


state 17

    (62) variable -> VARIABLE_INSTANCIA .

    ASIGNACION      reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MAS             reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MENOS           reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MULTIPLICAR     reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    DIVIDIR         reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MODULO          reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    EXPONENCIACION  reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    COMA            reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    CORCHETE_DER    reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MAYOR_QUE       reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MENOR_QUE       reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    IGUAL_IGUAL     reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    DIFERENTE       reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MAYOR_IGUAL     reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    MENOR_IGUAL     reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    THEN            reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    AND             reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    OR              reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    NOT             reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    PUTS            reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_LOCAL  reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    DEF             reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_GLOBAL reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_INSTANCIA reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_CLASE  reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    IF              reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    CORCHETE_IZQ    reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    $end            reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    PUNTO_Y_COMA    reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    END_BLOCK       reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    ELSE            reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    ELSIF           reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)
    PARENTESIS_DER  reduce using rule 62 (variable -> VARIABLE_INSTANCIA .)


state 18

    (63) variable -> VARIABLE_CLASE .

    ASIGNACION      reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MAS             reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MENOS           reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MULTIPLICAR     reduce using rule 63 (variable -> VARIABLE_CLASE .)
    DIVIDIR         reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MODULO          reduce using rule 63 (variable -> VARIABLE_CLASE .)
    EXPONENCIACION  reduce using rule 63 (variable -> VARIABLE_CLASE .)
    COMA            reduce using rule 63 (variable -> VARIABLE_CLASE .)
    CORCHETE_DER    reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MAYOR_QUE       reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MENOR_QUE       reduce using rule 63 (variable -> VARIABLE_CLASE .)
    IGUAL_IGUAL     reduce using rule 63 (variable -> VARIABLE_CLASE .)
    DIFERENTE       reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MAYOR_IGUAL     reduce using rule 63 (variable -> VARIABLE_CLASE .)
    MENOR_IGUAL     reduce using rule 63 (variable -> VARIABLE_CLASE .)
    THEN            reduce using rule 63 (variable -> VARIABLE_CLASE .)
    AND             reduce using rule 63 (variable -> VARIABLE_CLASE .)
    OR              reduce using rule 63 (variable -> VARIABLE_CLASE .)
    NOT             reduce using rule 63 (variable -> VARIABLE_CLASE .)
    PUTS            reduce using rule 63 (variable -> VARIABLE_CLASE .)
    VARIABLE_LOCAL  reduce using rule 63 (variable -> VARIABLE_CLASE .)
    DEF             reduce using rule 63 (variable -> VARIABLE_CLASE .)
    VARIABLE_GLOBAL reduce using rule 63 (variable -> VARIABLE_CLASE .)
    VARIABLE_INSTANCIA reduce using rule 63 (variable -> VARIABLE_CLASE .)
    VARIABLE_CLASE  reduce using rule 63 (variable -> VARIABLE_CLASE .)
    IF              reduce using rule 63 (variable -> VARIABLE_CLASE .)
    CORCHETE_IZQ    reduce using rule 63 (variable -> VARIABLE_CLASE .)
    $end            reduce using rule 63 (variable -> VARIABLE_CLASE .)
    PUNTO_Y_COMA    reduce using rule 63 (variable -> VARIABLE_CLASE .)
    END_BLOCK       reduce using rule 63 (variable -> VARIABLE_CLASE .)
    ELSE            reduce using rule 63 (variable -> VARIABLE_CLASE .)
    ELSIF           reduce using rule 63 (variable -> VARIABLE_CLASE .)
    PARENTESIS_DER  reduce using rule 63 (variable -> VARIABLE_CLASE .)


state 19

    (16) if -> IF . expresion instrucciones END_BLOCK
    (17) if -> IF . expresion THEN instrucciones END_BLOCK
    (18) if_else -> IF . expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> IF . expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> IF . expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> IF . expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> IF . expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> IF . expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 37
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 20

    (2) programa -> sentencia programa .

    $end            reduce using rule 2 (programa -> sentencia programa .)


state 21

    (8) asignacion -> variable ASIGNACION . valores
    (73) valores -> . operacionAritmetica
    (74) valores -> . SIMBOLO
    (75) valores -> . booleano
    (76) valores -> . array
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    SIMBOLO         shift and go to state 45
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    variable                       shift and go to state 35
    valores                        shift and go to state 43
    operacionAritmetica            shift and go to state 44
    booleano                       shift and go to state 46
    array                          shift and go to state 47
    valor                          shift and go to state 31

state 22

    (10) impresion -> PUTS PARENTESIS_IZQ . argumentos PARENTESIS_DER
    (66) argumentos -> . argumento
    (67) argumentos -> . argumento COMA argumentos
    (68) argumento -> . booleano
    (69) argumento -> . operacionAritmetica
    (70) argumento -> . array
    (71) argumento -> . empty
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (72) empty -> .
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 72 (empty -> .)
    PARENTESIS_DER  reduce using rule 72 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumentos                     shift and go to state 48
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 23

    (12) array -> CORCHETE_IZQ argumentos . CORCHETE_DER

    CORCHETE_DER    shift and go to state 49


state 24

    (66) argumentos -> argumento .
    (67) argumentos -> argumento . COMA argumentos

    CORCHETE_DER    reduce using rule 66 (argumentos -> argumento .)
    PARENTESIS_DER  reduce using rule 66 (argumentos -> argumento .)
    COMA            shift and go to state 50


state 25

    (68) argumento -> booleano .

    COMA            reduce using rule 68 (argumento -> booleano .)
    CORCHETE_DER    reduce using rule 68 (argumento -> booleano .)
    PARENTESIS_DER  reduce using rule 68 (argumento -> booleano .)


state 26

    (69) argumento -> operacionAritmetica .

    COMA            reduce using rule 69 (argumento -> operacionAritmetica .)
    CORCHETE_DER    reduce using rule 69 (argumento -> operacionAritmetica .)
    PARENTESIS_DER  reduce using rule 69 (argumento -> operacionAritmetica .)


state 27

    (70) argumento -> array .

    COMA            reduce using rule 70 (argumento -> array .)
    CORCHETE_DER    reduce using rule 70 (argumento -> array .)
    PARENTESIS_DER  reduce using rule 70 (argumento -> array .)


state 28

    (71) argumento -> empty .

    COMA            reduce using rule 71 (argumento -> empty .)
    CORCHETE_DER    reduce using rule 71 (argumento -> empty .)
    PARENTESIS_DER  reduce using rule 71 (argumento -> empty .)


state 29

    (64) booleano -> FALSE .

    COMA            reduce using rule 64 (booleano -> FALSE .)
    CORCHETE_DER    reduce using rule 64 (booleano -> FALSE .)
    MAYOR_QUE       reduce using rule 64 (booleano -> FALSE .)
    MENOR_QUE       reduce using rule 64 (booleano -> FALSE .)
    IGUAL_IGUAL     reduce using rule 64 (booleano -> FALSE .)
    DIFERENTE       reduce using rule 64 (booleano -> FALSE .)
    MAYOR_IGUAL     reduce using rule 64 (booleano -> FALSE .)
    MENOR_IGUAL     reduce using rule 64 (booleano -> FALSE .)
    THEN            reduce using rule 64 (booleano -> FALSE .)
    AND             reduce using rule 64 (booleano -> FALSE .)
    OR              reduce using rule 64 (booleano -> FALSE .)
    NOT             reduce using rule 64 (booleano -> FALSE .)
    PUTS            reduce using rule 64 (booleano -> FALSE .)
    VARIABLE_LOCAL  reduce using rule 64 (booleano -> FALSE .)
    DEF             reduce using rule 64 (booleano -> FALSE .)
    VARIABLE_GLOBAL reduce using rule 64 (booleano -> FALSE .)
    VARIABLE_INSTANCIA reduce using rule 64 (booleano -> FALSE .)
    VARIABLE_CLASE  reduce using rule 64 (booleano -> FALSE .)
    IF              reduce using rule 64 (booleano -> FALSE .)
    CORCHETE_IZQ    reduce using rule 64 (booleano -> FALSE .)
    $end            reduce using rule 64 (booleano -> FALSE .)
    PUNTO_Y_COMA    reduce using rule 64 (booleano -> FALSE .)
    END_BLOCK       reduce using rule 64 (booleano -> FALSE .)
    ELSE            reduce using rule 64 (booleano -> FALSE .)
    ELSIF           reduce using rule 64 (booleano -> FALSE .)
    PARENTESIS_DER  reduce using rule 64 (booleano -> FALSE .)


state 30

    (65) booleano -> TRUE .

    COMA            reduce using rule 65 (booleano -> TRUE .)
    CORCHETE_DER    reduce using rule 65 (booleano -> TRUE .)
    MAYOR_QUE       reduce using rule 65 (booleano -> TRUE .)
    MENOR_QUE       reduce using rule 65 (booleano -> TRUE .)
    IGUAL_IGUAL     reduce using rule 65 (booleano -> TRUE .)
    DIFERENTE       reduce using rule 65 (booleano -> TRUE .)
    MAYOR_IGUAL     reduce using rule 65 (booleano -> TRUE .)
    MENOR_IGUAL     reduce using rule 65 (booleano -> TRUE .)
    THEN            reduce using rule 65 (booleano -> TRUE .)
    AND             reduce using rule 65 (booleano -> TRUE .)
    OR              reduce using rule 65 (booleano -> TRUE .)
    NOT             reduce using rule 65 (booleano -> TRUE .)
    PUTS            reduce using rule 65 (booleano -> TRUE .)
    VARIABLE_LOCAL  reduce using rule 65 (booleano -> TRUE .)
    DEF             reduce using rule 65 (booleano -> TRUE .)
    VARIABLE_GLOBAL reduce using rule 65 (booleano -> TRUE .)
    VARIABLE_INSTANCIA reduce using rule 65 (booleano -> TRUE .)
    VARIABLE_CLASE  reduce using rule 65 (booleano -> TRUE .)
    IF              reduce using rule 65 (booleano -> TRUE .)
    CORCHETE_IZQ    reduce using rule 65 (booleano -> TRUE .)
    $end            reduce using rule 65 (booleano -> TRUE .)
    PUNTO_Y_COMA    reduce using rule 65 (booleano -> TRUE .)
    END_BLOCK       reduce using rule 65 (booleano -> TRUE .)
    ELSE            reduce using rule 65 (booleano -> TRUE .)
    ELSIF           reduce using rule 65 (booleano -> TRUE .)
    PARENTESIS_DER  reduce using rule 65 (booleano -> TRUE .)


state 31

    (81) operacionAritmetica -> valor .
    (82) operacionAritmetica -> valor . operador operacionAritmetica
    (83) operador -> . MAS
    (84) operador -> . MENOS
    (85) operador -> . MULTIPLICAR
    (86) operador -> . DIVIDIR
    (87) operador -> . MODULO
    (88) operador -> . EXPONENCIACION

    COMA            reduce using rule 81 (operacionAritmetica -> valor .)
    CORCHETE_DER    reduce using rule 81 (operacionAritmetica -> valor .)
    PUTS            reduce using rule 81 (operacionAritmetica -> valor .)
    CORCHETE_IZQ    reduce using rule 81 (operacionAritmetica -> valor .)
    DEF             reduce using rule 81 (operacionAritmetica -> valor .)
    VARIABLE_LOCAL  reduce using rule 81 (operacionAritmetica -> valor .)
    VARIABLE_GLOBAL reduce using rule 81 (operacionAritmetica -> valor .)
    VARIABLE_INSTANCIA reduce using rule 81 (operacionAritmetica -> valor .)
    VARIABLE_CLASE  reduce using rule 81 (operacionAritmetica -> valor .)
    IF              reduce using rule 81 (operacionAritmetica -> valor .)
    $end            reduce using rule 81 (operacionAritmetica -> valor .)
    PUNTO_Y_COMA    reduce using rule 81 (operacionAritmetica -> valor .)
    END_BLOCK       reduce using rule 81 (operacionAritmetica -> valor .)
    ELSE            reduce using rule 81 (operacionAritmetica -> valor .)
    ELSIF           reduce using rule 81 (operacionAritmetica -> valor .)
    PARENTESIS_DER  reduce using rule 81 (operacionAritmetica -> valor .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    MULTIPLICAR     shift and go to state 54
    DIVIDIR         shift and go to state 55
    MODULO          shift and go to state 56
    EXPONENCIACION  shift and go to state 57

    operador                       shift and go to state 51

state 32

    (77) valor -> NUMERO .

    MAS             reduce using rule 77 (valor -> NUMERO .)
    MENOS           reduce using rule 77 (valor -> NUMERO .)
    MULTIPLICAR     reduce using rule 77 (valor -> NUMERO .)
    DIVIDIR         reduce using rule 77 (valor -> NUMERO .)
    MODULO          reduce using rule 77 (valor -> NUMERO .)
    EXPONENCIACION  reduce using rule 77 (valor -> NUMERO .)
    COMA            reduce using rule 77 (valor -> NUMERO .)
    CORCHETE_DER    reduce using rule 77 (valor -> NUMERO .)
    MAYOR_QUE       reduce using rule 77 (valor -> NUMERO .)
    MENOR_QUE       reduce using rule 77 (valor -> NUMERO .)
    IGUAL_IGUAL     reduce using rule 77 (valor -> NUMERO .)
    DIFERENTE       reduce using rule 77 (valor -> NUMERO .)
    MAYOR_IGUAL     reduce using rule 77 (valor -> NUMERO .)
    MENOR_IGUAL     reduce using rule 77 (valor -> NUMERO .)
    THEN            reduce using rule 77 (valor -> NUMERO .)
    AND             reduce using rule 77 (valor -> NUMERO .)
    OR              reduce using rule 77 (valor -> NUMERO .)
    NOT             reduce using rule 77 (valor -> NUMERO .)
    PUTS            reduce using rule 77 (valor -> NUMERO .)
    VARIABLE_LOCAL  reduce using rule 77 (valor -> NUMERO .)
    DEF             reduce using rule 77 (valor -> NUMERO .)
    VARIABLE_GLOBAL reduce using rule 77 (valor -> NUMERO .)
    VARIABLE_INSTANCIA reduce using rule 77 (valor -> NUMERO .)
    VARIABLE_CLASE  reduce using rule 77 (valor -> NUMERO .)
    IF              reduce using rule 77 (valor -> NUMERO .)
    CORCHETE_IZQ    reduce using rule 77 (valor -> NUMERO .)
    $end            reduce using rule 77 (valor -> NUMERO .)
    PUNTO_Y_COMA    reduce using rule 77 (valor -> NUMERO .)
    END_BLOCK       reduce using rule 77 (valor -> NUMERO .)
    ELSE            reduce using rule 77 (valor -> NUMERO .)
    ELSIF           reduce using rule 77 (valor -> NUMERO .)
    PARENTESIS_DER  reduce using rule 77 (valor -> NUMERO .)


state 33

    (78) valor -> FLOTANTE .

    MAS             reduce using rule 78 (valor -> FLOTANTE .)
    MENOS           reduce using rule 78 (valor -> FLOTANTE .)
    MULTIPLICAR     reduce using rule 78 (valor -> FLOTANTE .)
    DIVIDIR         reduce using rule 78 (valor -> FLOTANTE .)
    MODULO          reduce using rule 78 (valor -> FLOTANTE .)
    EXPONENCIACION  reduce using rule 78 (valor -> FLOTANTE .)
    COMA            reduce using rule 78 (valor -> FLOTANTE .)
    CORCHETE_DER    reduce using rule 78 (valor -> FLOTANTE .)
    MAYOR_QUE       reduce using rule 78 (valor -> FLOTANTE .)
    MENOR_QUE       reduce using rule 78 (valor -> FLOTANTE .)
    IGUAL_IGUAL     reduce using rule 78 (valor -> FLOTANTE .)
    DIFERENTE       reduce using rule 78 (valor -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 78 (valor -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 78 (valor -> FLOTANTE .)
    THEN            reduce using rule 78 (valor -> FLOTANTE .)
    AND             reduce using rule 78 (valor -> FLOTANTE .)
    OR              reduce using rule 78 (valor -> FLOTANTE .)
    NOT             reduce using rule 78 (valor -> FLOTANTE .)
    PUTS            reduce using rule 78 (valor -> FLOTANTE .)
    VARIABLE_LOCAL  reduce using rule 78 (valor -> FLOTANTE .)
    DEF             reduce using rule 78 (valor -> FLOTANTE .)
    VARIABLE_GLOBAL reduce using rule 78 (valor -> FLOTANTE .)
    VARIABLE_INSTANCIA reduce using rule 78 (valor -> FLOTANTE .)
    VARIABLE_CLASE  reduce using rule 78 (valor -> FLOTANTE .)
    IF              reduce using rule 78 (valor -> FLOTANTE .)
    CORCHETE_IZQ    reduce using rule 78 (valor -> FLOTANTE .)
    $end            reduce using rule 78 (valor -> FLOTANTE .)
    PUNTO_Y_COMA    reduce using rule 78 (valor -> FLOTANTE .)
    END_BLOCK       reduce using rule 78 (valor -> FLOTANTE .)
    ELSE            reduce using rule 78 (valor -> FLOTANTE .)
    ELSIF           reduce using rule 78 (valor -> FLOTANTE .)
    PARENTESIS_DER  reduce using rule 78 (valor -> FLOTANTE .)


state 34

    (79) valor -> CADENA .

    MAS             reduce using rule 79 (valor -> CADENA .)
    MENOS           reduce using rule 79 (valor -> CADENA .)
    MULTIPLICAR     reduce using rule 79 (valor -> CADENA .)
    DIVIDIR         reduce using rule 79 (valor -> CADENA .)
    MODULO          reduce using rule 79 (valor -> CADENA .)
    EXPONENCIACION  reduce using rule 79 (valor -> CADENA .)
    COMA            reduce using rule 79 (valor -> CADENA .)
    CORCHETE_DER    reduce using rule 79 (valor -> CADENA .)
    MAYOR_QUE       reduce using rule 79 (valor -> CADENA .)
    MENOR_QUE       reduce using rule 79 (valor -> CADENA .)
    IGUAL_IGUAL     reduce using rule 79 (valor -> CADENA .)
    DIFERENTE       reduce using rule 79 (valor -> CADENA .)
    MAYOR_IGUAL     reduce using rule 79 (valor -> CADENA .)
    MENOR_IGUAL     reduce using rule 79 (valor -> CADENA .)
    THEN            reduce using rule 79 (valor -> CADENA .)
    AND             reduce using rule 79 (valor -> CADENA .)
    OR              reduce using rule 79 (valor -> CADENA .)
    NOT             reduce using rule 79 (valor -> CADENA .)
    PUTS            reduce using rule 79 (valor -> CADENA .)
    VARIABLE_LOCAL  reduce using rule 79 (valor -> CADENA .)
    DEF             reduce using rule 79 (valor -> CADENA .)
    VARIABLE_GLOBAL reduce using rule 79 (valor -> CADENA .)
    VARIABLE_INSTANCIA reduce using rule 79 (valor -> CADENA .)
    VARIABLE_CLASE  reduce using rule 79 (valor -> CADENA .)
    IF              reduce using rule 79 (valor -> CADENA .)
    CORCHETE_IZQ    reduce using rule 79 (valor -> CADENA .)
    $end            reduce using rule 79 (valor -> CADENA .)
    PUNTO_Y_COMA    reduce using rule 79 (valor -> CADENA .)
    END_BLOCK       reduce using rule 79 (valor -> CADENA .)
    ELSE            reduce using rule 79 (valor -> CADENA .)
    ELSIF           reduce using rule 79 (valor -> CADENA .)
    PARENTESIS_DER  reduce using rule 79 (valor -> CADENA .)


state 35

    (80) valor -> variable .

    MAS             reduce using rule 80 (valor -> variable .)
    MENOS           reduce using rule 80 (valor -> variable .)
    MULTIPLICAR     reduce using rule 80 (valor -> variable .)
    DIVIDIR         reduce using rule 80 (valor -> variable .)
    MODULO          reduce using rule 80 (valor -> variable .)
    EXPONENCIACION  reduce using rule 80 (valor -> variable .)
    COMA            reduce using rule 80 (valor -> variable .)
    CORCHETE_DER    reduce using rule 80 (valor -> variable .)
    MAYOR_QUE       reduce using rule 80 (valor -> variable .)
    MENOR_QUE       reduce using rule 80 (valor -> variable .)
    IGUAL_IGUAL     reduce using rule 80 (valor -> variable .)
    DIFERENTE       reduce using rule 80 (valor -> variable .)
    MAYOR_IGUAL     reduce using rule 80 (valor -> variable .)
    MENOR_IGUAL     reduce using rule 80 (valor -> variable .)
    THEN            reduce using rule 80 (valor -> variable .)
    AND             reduce using rule 80 (valor -> variable .)
    OR              reduce using rule 80 (valor -> variable .)
    NOT             reduce using rule 80 (valor -> variable .)
    PUTS            reduce using rule 80 (valor -> variable .)
    VARIABLE_LOCAL  reduce using rule 80 (valor -> variable .)
    DEF             reduce using rule 80 (valor -> variable .)
    VARIABLE_GLOBAL reduce using rule 80 (valor -> variable .)
    VARIABLE_INSTANCIA reduce using rule 80 (valor -> variable .)
    VARIABLE_CLASE  reduce using rule 80 (valor -> variable .)
    IF              reduce using rule 80 (valor -> variable .)
    CORCHETE_IZQ    reduce using rule 80 (valor -> variable .)
    $end            reduce using rule 80 (valor -> variable .)
    PUNTO_Y_COMA    reduce using rule 80 (valor -> variable .)
    END_BLOCK       reduce using rule 80 (valor -> variable .)
    ELSE            reduce using rule 80 (valor -> variable .)
    ELSIF           reduce using rule 80 (valor -> variable .)
    PARENTESIS_DER  reduce using rule 80 (valor -> variable .)


state 36

    (28) funcion -> DEF VARIABLE_LOCAL . PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> DEF VARIABLE_LOCAL . PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK

    PARENTESIS_IZQ  shift and go to state 58


state 37

    (16) if -> IF expresion . instrucciones END_BLOCK
    (17) if -> IF expresion . THEN instrucciones END_BLOCK
    (18) if_else -> IF expresion . instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> IF expresion . THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> IF expresion . instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> IF expresion . THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> IF expresion . instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> IF expresion . THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    THEN            shift and go to state 60
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 59
    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 38

    (33) expresion -> var_expresion .
    (34) expresion -> var_expresion . comparadores var_expresion
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    THEN            reduce using rule 33 (expresion -> var_expresion .)
    AND             reduce using rule 33 (expresion -> var_expresion .)
    OR              reduce using rule 33 (expresion -> var_expresion .)
    NOT             reduce using rule 33 (expresion -> var_expresion .)
    PUTS            reduce using rule 33 (expresion -> var_expresion .)
    VARIABLE_LOCAL  reduce using rule 33 (expresion -> var_expresion .)
    DEF             reduce using rule 33 (expresion -> var_expresion .)
    VARIABLE_GLOBAL reduce using rule 33 (expresion -> var_expresion .)
    VARIABLE_INSTANCIA reduce using rule 33 (expresion -> var_expresion .)
    VARIABLE_CLASE  reduce using rule 33 (expresion -> var_expresion .)
    IF              reduce using rule 33 (expresion -> var_expresion .)
    PARENTESIS_DER  reduce using rule 33 (expresion -> var_expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69

  ! MAYOR_QUE       [ reduce using rule 33 (expresion -> var_expresion .) ]
  ! MENOR_QUE       [ reduce using rule 33 (expresion -> var_expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 33 (expresion -> var_expresion .) ]
  ! DIFERENTE       [ reduce using rule 33 (expresion -> var_expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 33 (expresion -> var_expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 33 (expresion -> var_expresion .) ]

    comparadores                   shift and go to state 79

state 39

    (36) expresion -> PARENTESIS_IZQ . expresion PARENTESIS_DER
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 80
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 40

    (37) expresion -> NOT_BLOCK . expresion
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 81
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 41

    (48) var_expresion -> valor .

    MAYOR_QUE       reduce using rule 48 (var_expresion -> valor .)
    MENOR_QUE       reduce using rule 48 (var_expresion -> valor .)
    IGUAL_IGUAL     reduce using rule 48 (var_expresion -> valor .)
    DIFERENTE       reduce using rule 48 (var_expresion -> valor .)
    MAYOR_IGUAL     reduce using rule 48 (var_expresion -> valor .)
    MENOR_IGUAL     reduce using rule 48 (var_expresion -> valor .)
    THEN            reduce using rule 48 (var_expresion -> valor .)
    AND             reduce using rule 48 (var_expresion -> valor .)
    OR              reduce using rule 48 (var_expresion -> valor .)
    NOT             reduce using rule 48 (var_expresion -> valor .)
    PUTS            reduce using rule 48 (var_expresion -> valor .)
    VARIABLE_LOCAL  reduce using rule 48 (var_expresion -> valor .)
    DEF             reduce using rule 48 (var_expresion -> valor .)
    VARIABLE_GLOBAL reduce using rule 48 (var_expresion -> valor .)
    VARIABLE_INSTANCIA reduce using rule 48 (var_expresion -> valor .)
    VARIABLE_CLASE  reduce using rule 48 (var_expresion -> valor .)
    IF              reduce using rule 48 (var_expresion -> valor .)
    PARENTESIS_DER  reduce using rule 48 (var_expresion -> valor .)


state 42

    (49) var_expresion -> booleano .

    MAYOR_QUE       reduce using rule 49 (var_expresion -> booleano .)
    MENOR_QUE       reduce using rule 49 (var_expresion -> booleano .)
    IGUAL_IGUAL     reduce using rule 49 (var_expresion -> booleano .)
    DIFERENTE       reduce using rule 49 (var_expresion -> booleano .)
    MAYOR_IGUAL     reduce using rule 49 (var_expresion -> booleano .)
    MENOR_IGUAL     reduce using rule 49 (var_expresion -> booleano .)
    THEN            reduce using rule 49 (var_expresion -> booleano .)
    AND             reduce using rule 49 (var_expresion -> booleano .)
    OR              reduce using rule 49 (var_expresion -> booleano .)
    NOT             reduce using rule 49 (var_expresion -> booleano .)
    PUTS            reduce using rule 49 (var_expresion -> booleano .)
    VARIABLE_LOCAL  reduce using rule 49 (var_expresion -> booleano .)
    DEF             reduce using rule 49 (var_expresion -> booleano .)
    VARIABLE_GLOBAL reduce using rule 49 (var_expresion -> booleano .)
    VARIABLE_INSTANCIA reduce using rule 49 (var_expresion -> booleano .)
    VARIABLE_CLASE  reduce using rule 49 (var_expresion -> booleano .)
    IF              reduce using rule 49 (var_expresion -> booleano .)
    PARENTESIS_DER  reduce using rule 49 (var_expresion -> booleano .)


state 43

    (8) asignacion -> variable ASIGNACION valores .

    PUTS            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    CORCHETE_IZQ    reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    DEF             reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_LOCAL  reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_GLOBAL reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_INSTANCIA reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_CLASE  reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    IF              reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    $end            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    PUNTO_Y_COMA    reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    END_BLOCK       reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    ELSE            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    ELSIF           reduce using rule 8 (asignacion -> variable ASIGNACION valores .)


state 44

    (73) valores -> operacionAritmetica .

    PUTS            reduce using rule 73 (valores -> operacionAritmetica .)
    CORCHETE_IZQ    reduce using rule 73 (valores -> operacionAritmetica .)
    DEF             reduce using rule 73 (valores -> operacionAritmetica .)
    VARIABLE_LOCAL  reduce using rule 73 (valores -> operacionAritmetica .)
    VARIABLE_GLOBAL reduce using rule 73 (valores -> operacionAritmetica .)
    VARIABLE_INSTANCIA reduce using rule 73 (valores -> operacionAritmetica .)
    VARIABLE_CLASE  reduce using rule 73 (valores -> operacionAritmetica .)
    IF              reduce using rule 73 (valores -> operacionAritmetica .)
    $end            reduce using rule 73 (valores -> operacionAritmetica .)
    PUNTO_Y_COMA    reduce using rule 73 (valores -> operacionAritmetica .)
    END_BLOCK       reduce using rule 73 (valores -> operacionAritmetica .)
    ELSE            reduce using rule 73 (valores -> operacionAritmetica .)
    ELSIF           reduce using rule 73 (valores -> operacionAritmetica .)


state 45

    (74) valores -> SIMBOLO .

    PUTS            reduce using rule 74 (valores -> SIMBOLO .)
    CORCHETE_IZQ    reduce using rule 74 (valores -> SIMBOLO .)
    DEF             reduce using rule 74 (valores -> SIMBOLO .)
    VARIABLE_LOCAL  reduce using rule 74 (valores -> SIMBOLO .)
    VARIABLE_GLOBAL reduce using rule 74 (valores -> SIMBOLO .)
    VARIABLE_INSTANCIA reduce using rule 74 (valores -> SIMBOLO .)
    VARIABLE_CLASE  reduce using rule 74 (valores -> SIMBOLO .)
    IF              reduce using rule 74 (valores -> SIMBOLO .)
    $end            reduce using rule 74 (valores -> SIMBOLO .)
    PUNTO_Y_COMA    reduce using rule 74 (valores -> SIMBOLO .)
    END_BLOCK       reduce using rule 74 (valores -> SIMBOLO .)
    ELSE            reduce using rule 74 (valores -> SIMBOLO .)
    ELSIF           reduce using rule 74 (valores -> SIMBOLO .)


state 46

    (75) valores -> booleano .

    PUTS            reduce using rule 75 (valores -> booleano .)
    CORCHETE_IZQ    reduce using rule 75 (valores -> booleano .)
    DEF             reduce using rule 75 (valores -> booleano .)
    VARIABLE_LOCAL  reduce using rule 75 (valores -> booleano .)
    VARIABLE_GLOBAL reduce using rule 75 (valores -> booleano .)
    VARIABLE_INSTANCIA reduce using rule 75 (valores -> booleano .)
    VARIABLE_CLASE  reduce using rule 75 (valores -> booleano .)
    IF              reduce using rule 75 (valores -> booleano .)
    $end            reduce using rule 75 (valores -> booleano .)
    PUNTO_Y_COMA    reduce using rule 75 (valores -> booleano .)
    END_BLOCK       reduce using rule 75 (valores -> booleano .)
    ELSE            reduce using rule 75 (valores -> booleano .)
    ELSIF           reduce using rule 75 (valores -> booleano .)


state 47

    (76) valores -> array .

    PUTS            reduce using rule 76 (valores -> array .)
    CORCHETE_IZQ    reduce using rule 76 (valores -> array .)
    DEF             reduce using rule 76 (valores -> array .)
    VARIABLE_LOCAL  reduce using rule 76 (valores -> array .)
    VARIABLE_GLOBAL reduce using rule 76 (valores -> array .)
    VARIABLE_INSTANCIA reduce using rule 76 (valores -> array .)
    VARIABLE_CLASE  reduce using rule 76 (valores -> array .)
    IF              reduce using rule 76 (valores -> array .)
    $end            reduce using rule 76 (valores -> array .)
    PUNTO_Y_COMA    reduce using rule 76 (valores -> array .)
    END_BLOCK       reduce using rule 76 (valores -> array .)
    ELSE            reduce using rule 76 (valores -> array .)
    ELSIF           reduce using rule 76 (valores -> array .)


state 48

    (10) impresion -> PUTS PARENTESIS_IZQ argumentos . PARENTESIS_DER

    PARENTESIS_DER  shift and go to state 82


state 49

    (12) array -> CORCHETE_IZQ argumentos CORCHETE_DER .

    PUTS            reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    CORCHETE_IZQ    reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    DEF             reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_LOCAL  reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_GLOBAL reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_INSTANCIA reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_CLASE  reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    IF              reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    $end            reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    COMA            reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    CORCHETE_DER    reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    PUNTO_Y_COMA    reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    END_BLOCK       reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    ELSE            reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    ELSIF           reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    PARENTESIS_DER  reduce using rule 12 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)


state 50

    (67) argumentos -> argumento COMA . argumentos
    (66) argumentos -> . argumento
    (67) argumentos -> . argumento COMA argumentos
    (68) argumento -> . booleano
    (69) argumento -> . operacionAritmetica
    (70) argumento -> . array
    (71) argumento -> . empty
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (72) empty -> .
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 72 (empty -> .)
    CORCHETE_DER    reduce using rule 72 (empty -> .)
    PARENTESIS_DER  reduce using rule 72 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumento                      shift and go to state 24
    argumentos                     shift and go to state 83
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 51

    (82) operacionAritmetica -> valor operador . operacionAritmetica
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    valor                          shift and go to state 31
    operacionAritmetica            shift and go to state 84
    variable                       shift and go to state 35

state 52

    (83) operador -> MAS .

    NUMERO          reduce using rule 83 (operador -> MAS .)
    FLOTANTE        reduce using rule 83 (operador -> MAS .)
    CADENA          reduce using rule 83 (operador -> MAS .)
    VARIABLE_LOCAL  reduce using rule 83 (operador -> MAS .)
    VARIABLE_GLOBAL reduce using rule 83 (operador -> MAS .)
    VARIABLE_INSTANCIA reduce using rule 83 (operador -> MAS .)
    VARIABLE_CLASE  reduce using rule 83 (operador -> MAS .)


state 53

    (84) operador -> MENOS .

    NUMERO          reduce using rule 84 (operador -> MENOS .)
    FLOTANTE        reduce using rule 84 (operador -> MENOS .)
    CADENA          reduce using rule 84 (operador -> MENOS .)
    VARIABLE_LOCAL  reduce using rule 84 (operador -> MENOS .)
    VARIABLE_GLOBAL reduce using rule 84 (operador -> MENOS .)
    VARIABLE_INSTANCIA reduce using rule 84 (operador -> MENOS .)
    VARIABLE_CLASE  reduce using rule 84 (operador -> MENOS .)


state 54

    (85) operador -> MULTIPLICAR .

    NUMERO          reduce using rule 85 (operador -> MULTIPLICAR .)
    FLOTANTE        reduce using rule 85 (operador -> MULTIPLICAR .)
    CADENA          reduce using rule 85 (operador -> MULTIPLICAR .)
    VARIABLE_LOCAL  reduce using rule 85 (operador -> MULTIPLICAR .)
    VARIABLE_GLOBAL reduce using rule 85 (operador -> MULTIPLICAR .)
    VARIABLE_INSTANCIA reduce using rule 85 (operador -> MULTIPLICAR .)
    VARIABLE_CLASE  reduce using rule 85 (operador -> MULTIPLICAR .)


state 55

    (86) operador -> DIVIDIR .

    NUMERO          reduce using rule 86 (operador -> DIVIDIR .)
    FLOTANTE        reduce using rule 86 (operador -> DIVIDIR .)
    CADENA          reduce using rule 86 (operador -> DIVIDIR .)
    VARIABLE_LOCAL  reduce using rule 86 (operador -> DIVIDIR .)
    VARIABLE_GLOBAL reduce using rule 86 (operador -> DIVIDIR .)
    VARIABLE_INSTANCIA reduce using rule 86 (operador -> DIVIDIR .)
    VARIABLE_CLASE  reduce using rule 86 (operador -> DIVIDIR .)


state 56

    (87) operador -> MODULO .

    NUMERO          reduce using rule 87 (operador -> MODULO .)
    FLOTANTE        reduce using rule 87 (operador -> MODULO .)
    CADENA          reduce using rule 87 (operador -> MODULO .)
    VARIABLE_LOCAL  reduce using rule 87 (operador -> MODULO .)
    VARIABLE_GLOBAL reduce using rule 87 (operador -> MODULO .)
    VARIABLE_INSTANCIA reduce using rule 87 (operador -> MODULO .)
    VARIABLE_CLASE  reduce using rule 87 (operador -> MODULO .)


state 57

    (88) operador -> EXPONENCIACION .

    NUMERO          reduce using rule 88 (operador -> EXPONENCIACION .)
    FLOTANTE        reduce using rule 88 (operador -> EXPONENCIACION .)
    CADENA          reduce using rule 88 (operador -> EXPONENCIACION .)
    VARIABLE_LOCAL  reduce using rule 88 (operador -> EXPONENCIACION .)
    VARIABLE_GLOBAL reduce using rule 88 (operador -> EXPONENCIACION .)
    VARIABLE_INSTANCIA reduce using rule 88 (operador -> EXPONENCIACION .)
    VARIABLE_CLASE  reduce using rule 88 (operador -> EXPONENCIACION .)


state 58

    (28) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ . parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ . parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (29) parametros -> . parametro
    (30) parametros -> . parametro COMA parametros
    (96) parametros_defecto -> . parametro_defecto
    (97) parametros_defecto -> . parametro_defecto COMA parametros_defecto
    (31) parametro -> . VARIABLE_LOCAL
    (32) parametro -> . empty
    (98) parametro_defecto -> . VARIABLE_LOCAL
    (99) parametro_defecto -> . VARIABLE_LOCAL ASIGNACION valor
    (72) empty -> .

    VARIABLE_LOCAL  shift and go to state 85
    COMA            reduce using rule 72 (empty -> .)
    PARENTESIS_DER  reduce using rule 72 (empty -> .)

    parametros                     shift and go to state 86
    parametros_defecto             shift and go to state 87
    parametro                      shift and go to state 88
    parametro_defecto              shift and go to state 89
    empty                          shift and go to state 90

state 59

    (16) if -> IF expresion instrucciones . END_BLOCK
    (18) if_else -> IF expresion instrucciones . ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> IF expresion instrucciones . elsif_clauses END_BLOCK
    (22) if_elsif_else -> IF expresion instrucciones . elsif_clauses ELSE instrucciones END_BLOCK
    (24) elsif_clauses -> . ELSIF expresion instrucciones
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (26) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (27) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       shift and go to state 91
    ELSE            shift and go to state 92
    ELSIF           shift and go to state 94

    elsif_clauses                  shift and go to state 93

state 60

    (17) if -> IF expresion THEN . instrucciones END_BLOCK
    (19) if_else -> IF expresion THEN . instrucciones ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> IF expresion THEN . instrucciones elsif_clauses END_BLOCK
    (23) if_elsif_else -> IF expresion THEN . instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 95
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 61

    (35) expresion -> expresion comparadores . expresion
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 96
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 62

    (38) expresion -> expresion operador_logico . expresion
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 97
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 63

    (50) instrucciones -> instruccion .
    (51) instrucciones -> instruccion . instrucciones
    (52) instrucciones -> instruccion . PUNTO_Y_COMA instrucciones
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    END_BLOCK       reduce using rule 50 (instrucciones -> instruccion .)
    ELSE            reduce using rule 50 (instrucciones -> instruccion .)
    ELSIF           reduce using rule 50 (instrucciones -> instruccion .)
    PUNTO_Y_COMA    shift and go to state 99
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instruccion                    shift and go to state 63
    instrucciones                  shift and go to state 98
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 64

    (39) comparadores -> MAYOR_QUE .

    PARENTESIS_IZQ  reduce using rule 39 (comparadores -> MAYOR_QUE .)
    NOT_BLOCK       reduce using rule 39 (comparadores -> MAYOR_QUE .)
    NUMERO          reduce using rule 39 (comparadores -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 39 (comparadores -> MAYOR_QUE .)
    CADENA          reduce using rule 39 (comparadores -> MAYOR_QUE .)
    FALSE           reduce using rule 39 (comparadores -> MAYOR_QUE .)
    TRUE            reduce using rule 39 (comparadores -> MAYOR_QUE .)
    VARIABLE_LOCAL  reduce using rule 39 (comparadores -> MAYOR_QUE .)
    VARIABLE_GLOBAL reduce using rule 39 (comparadores -> MAYOR_QUE .)
    VARIABLE_INSTANCIA reduce using rule 39 (comparadores -> MAYOR_QUE .)
    VARIABLE_CLASE  reduce using rule 39 (comparadores -> MAYOR_QUE .)


state 65

    (40) comparadores -> MENOR_QUE .

    PARENTESIS_IZQ  reduce using rule 40 (comparadores -> MENOR_QUE .)
    NOT_BLOCK       reduce using rule 40 (comparadores -> MENOR_QUE .)
    NUMERO          reduce using rule 40 (comparadores -> MENOR_QUE .)
    FLOTANTE        reduce using rule 40 (comparadores -> MENOR_QUE .)
    CADENA          reduce using rule 40 (comparadores -> MENOR_QUE .)
    FALSE           reduce using rule 40 (comparadores -> MENOR_QUE .)
    TRUE            reduce using rule 40 (comparadores -> MENOR_QUE .)
    VARIABLE_LOCAL  reduce using rule 40 (comparadores -> MENOR_QUE .)
    VARIABLE_GLOBAL reduce using rule 40 (comparadores -> MENOR_QUE .)
    VARIABLE_INSTANCIA reduce using rule 40 (comparadores -> MENOR_QUE .)
    VARIABLE_CLASE  reduce using rule 40 (comparadores -> MENOR_QUE .)


state 66

    (41) comparadores -> IGUAL_IGUAL .

    PARENTESIS_IZQ  reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    NOT_BLOCK       reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    NUMERO          reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    FLOTANTE        reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    CADENA          reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    FALSE           reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    TRUE            reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 41 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_CLASE  reduce using rule 41 (comparadores -> IGUAL_IGUAL .)


state 67

    (42) comparadores -> DIFERENTE .

    PARENTESIS_IZQ  reduce using rule 42 (comparadores -> DIFERENTE .)
    NOT_BLOCK       reduce using rule 42 (comparadores -> DIFERENTE .)
    NUMERO          reduce using rule 42 (comparadores -> DIFERENTE .)
    FLOTANTE        reduce using rule 42 (comparadores -> DIFERENTE .)
    CADENA          reduce using rule 42 (comparadores -> DIFERENTE .)
    FALSE           reduce using rule 42 (comparadores -> DIFERENTE .)
    TRUE            reduce using rule 42 (comparadores -> DIFERENTE .)
    VARIABLE_LOCAL  reduce using rule 42 (comparadores -> DIFERENTE .)
    VARIABLE_GLOBAL reduce using rule 42 (comparadores -> DIFERENTE .)
    VARIABLE_INSTANCIA reduce using rule 42 (comparadores -> DIFERENTE .)
    VARIABLE_CLASE  reduce using rule 42 (comparadores -> DIFERENTE .)


state 68

    (43) comparadores -> MAYOR_IGUAL .

    PARENTESIS_IZQ  reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    NOT_BLOCK       reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    NUMERO          reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    CADENA          reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    FALSE           reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    TRUE            reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 43 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_CLASE  reduce using rule 43 (comparadores -> MAYOR_IGUAL .)


state 69

    (44) comparadores -> MENOR_IGUAL .

    PARENTESIS_IZQ  reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    NOT_BLOCK       reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    NUMERO          reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    CADENA          reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    FALSE           reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    TRUE            reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 44 (comparadores -> MENOR_IGUAL .)
    VARIABLE_CLASE  reduce using rule 44 (comparadores -> MENOR_IGUAL .)


state 70

    (45) operador_logico -> AND .

    PARENTESIS_IZQ  reduce using rule 45 (operador_logico -> AND .)
    NOT_BLOCK       reduce using rule 45 (operador_logico -> AND .)
    NUMERO          reduce using rule 45 (operador_logico -> AND .)
    FLOTANTE        reduce using rule 45 (operador_logico -> AND .)
    CADENA          reduce using rule 45 (operador_logico -> AND .)
    FALSE           reduce using rule 45 (operador_logico -> AND .)
    TRUE            reduce using rule 45 (operador_logico -> AND .)
    VARIABLE_LOCAL  reduce using rule 45 (operador_logico -> AND .)
    VARIABLE_GLOBAL reduce using rule 45 (operador_logico -> AND .)
    VARIABLE_INSTANCIA reduce using rule 45 (operador_logico -> AND .)
    VARIABLE_CLASE  reduce using rule 45 (operador_logico -> AND .)


state 71

    (46) operador_logico -> OR .

    PARENTESIS_IZQ  reduce using rule 46 (operador_logico -> OR .)
    NOT_BLOCK       reduce using rule 46 (operador_logico -> OR .)
    NUMERO          reduce using rule 46 (operador_logico -> OR .)
    FLOTANTE        reduce using rule 46 (operador_logico -> OR .)
    CADENA          reduce using rule 46 (operador_logico -> OR .)
    FALSE           reduce using rule 46 (operador_logico -> OR .)
    TRUE            reduce using rule 46 (operador_logico -> OR .)
    VARIABLE_LOCAL  reduce using rule 46 (operador_logico -> OR .)
    VARIABLE_GLOBAL reduce using rule 46 (operador_logico -> OR .)
    VARIABLE_INSTANCIA reduce using rule 46 (operador_logico -> OR .)
    VARIABLE_CLASE  reduce using rule 46 (operador_logico -> OR .)


state 72

    (47) operador_logico -> NOT .

    PARENTESIS_IZQ  reduce using rule 47 (operador_logico -> NOT .)
    NOT_BLOCK       reduce using rule 47 (operador_logico -> NOT .)
    NUMERO          reduce using rule 47 (operador_logico -> NOT .)
    FLOTANTE        reduce using rule 47 (operador_logico -> NOT .)
    CADENA          reduce using rule 47 (operador_logico -> NOT .)
    FALSE           reduce using rule 47 (operador_logico -> NOT .)
    TRUE            reduce using rule 47 (operador_logico -> NOT .)
    VARIABLE_LOCAL  reduce using rule 47 (operador_logico -> NOT .)
    VARIABLE_GLOBAL reduce using rule 47 (operador_logico -> NOT .)
    VARIABLE_INSTANCIA reduce using rule 47 (operador_logico -> NOT .)
    VARIABLE_CLASE  reduce using rule 47 (operador_logico -> NOT .)


state 73

    (53) instruccion -> asignacion .

    PUNTO_Y_COMA    reduce using rule 53 (instruccion -> asignacion .)
    PUTS            reduce using rule 53 (instruccion -> asignacion .)
    VARIABLE_LOCAL  reduce using rule 53 (instruccion -> asignacion .)
    DEF             reduce using rule 53 (instruccion -> asignacion .)
    VARIABLE_GLOBAL reduce using rule 53 (instruccion -> asignacion .)
    VARIABLE_INSTANCIA reduce using rule 53 (instruccion -> asignacion .)
    VARIABLE_CLASE  reduce using rule 53 (instruccion -> asignacion .)
    IF              reduce using rule 53 (instruccion -> asignacion .)
    END_BLOCK       reduce using rule 53 (instruccion -> asignacion .)
    ELSE            reduce using rule 53 (instruccion -> asignacion .)
    ELSIF           reduce using rule 53 (instruccion -> asignacion .)


state 74

    (54) instruccion -> impresion .

    PUNTO_Y_COMA    reduce using rule 54 (instruccion -> impresion .)
    PUTS            reduce using rule 54 (instruccion -> impresion .)
    VARIABLE_LOCAL  reduce using rule 54 (instruccion -> impresion .)
    DEF             reduce using rule 54 (instruccion -> impresion .)
    VARIABLE_GLOBAL reduce using rule 54 (instruccion -> impresion .)
    VARIABLE_INSTANCIA reduce using rule 54 (instruccion -> impresion .)
    VARIABLE_CLASE  reduce using rule 54 (instruccion -> impresion .)
    IF              reduce using rule 54 (instruccion -> impresion .)
    END_BLOCK       reduce using rule 54 (instruccion -> impresion .)
    ELSE            reduce using rule 54 (instruccion -> impresion .)
    ELSIF           reduce using rule 54 (instruccion -> impresion .)


state 75

    (55) instruccion -> condicion .

    PUNTO_Y_COMA    reduce using rule 55 (instruccion -> condicion .)
    PUTS            reduce using rule 55 (instruccion -> condicion .)
    VARIABLE_LOCAL  reduce using rule 55 (instruccion -> condicion .)
    DEF             reduce using rule 55 (instruccion -> condicion .)
    VARIABLE_GLOBAL reduce using rule 55 (instruccion -> condicion .)
    VARIABLE_INSTANCIA reduce using rule 55 (instruccion -> condicion .)
    VARIABLE_CLASE  reduce using rule 55 (instruccion -> condicion .)
    IF              reduce using rule 55 (instruccion -> condicion .)
    END_BLOCK       reduce using rule 55 (instruccion -> condicion .)
    ELSE            reduce using rule 55 (instruccion -> condicion .)
    ELSIF           reduce using rule 55 (instruccion -> condicion .)


state 76

    (56) instruccion -> llamada_funcion .

    PUNTO_Y_COMA    reduce using rule 56 (instruccion -> llamada_funcion .)
    PUTS            reduce using rule 56 (instruccion -> llamada_funcion .)
    VARIABLE_LOCAL  reduce using rule 56 (instruccion -> llamada_funcion .)
    DEF             reduce using rule 56 (instruccion -> llamada_funcion .)
    VARIABLE_GLOBAL reduce using rule 56 (instruccion -> llamada_funcion .)
    VARIABLE_INSTANCIA reduce using rule 56 (instruccion -> llamada_funcion .)
    VARIABLE_CLASE  reduce using rule 56 (instruccion -> llamada_funcion .)
    IF              reduce using rule 56 (instruccion -> llamada_funcion .)
    END_BLOCK       reduce using rule 56 (instruccion -> llamada_funcion .)
    ELSE            reduce using rule 56 (instruccion -> llamada_funcion .)
    ELSIF           reduce using rule 56 (instruccion -> llamada_funcion .)


state 77

    (57) instruccion -> funcion .

    PUNTO_Y_COMA    reduce using rule 57 (instruccion -> funcion .)
    PUTS            reduce using rule 57 (instruccion -> funcion .)
    VARIABLE_LOCAL  reduce using rule 57 (instruccion -> funcion .)
    DEF             reduce using rule 57 (instruccion -> funcion .)
    VARIABLE_GLOBAL reduce using rule 57 (instruccion -> funcion .)
    VARIABLE_INSTANCIA reduce using rule 57 (instruccion -> funcion .)
    VARIABLE_CLASE  reduce using rule 57 (instruccion -> funcion .)
    IF              reduce using rule 57 (instruccion -> funcion .)
    END_BLOCK       reduce using rule 57 (instruccion -> funcion .)
    ELSE            reduce using rule 57 (instruccion -> funcion .)
    ELSIF           reduce using rule 57 (instruccion -> funcion .)


state 78

    (58) llamada_funcion -> VARIABLE_LOCAL . PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> VARIABLE_LOCAL . PARENTESIS_IZQ PARENTESIS_DER
    (60) variable -> VARIABLE_LOCAL .

    PARENTESIS_IZQ  shift and go to state 100
    ASIGNACION      reduce using rule 60 (variable -> VARIABLE_LOCAL .)


state 79

    (34) expresion -> var_expresion comparadores . var_expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    var_expresion                  shift and go to state 101
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 80

    (36) expresion -> PARENTESIS_IZQ expresion . PARENTESIS_DER
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT

    PARENTESIS_DER  shift and go to state 102
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 81

    (37) expresion -> NOT_BLOCK expresion .
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    PUTS            reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_LOCAL  reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    DEF             reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_GLOBAL reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_INSTANCIA reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_CLASE  reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    IF              reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    PARENTESIS_DER  reduce using rule 37 (expresion -> NOT_BLOCK expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! MENOR_QUE       [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! DIFERENTE       [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! AND             [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! OR              [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]
  ! NOT             [ reduce using rule 37 (expresion -> NOT_BLOCK expresion .) ]

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 82

    (10) impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .

    PUTS            reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    CORCHETE_IZQ    reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    DEF             reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    IF              reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    $end            reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    PUNTO_Y_COMA    reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    END_BLOCK       reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSE            reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSIF           reduce using rule 10 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)


state 83

    (67) argumentos -> argumento COMA argumentos .

    CORCHETE_DER    reduce using rule 67 (argumentos -> argumento COMA argumentos .)
    PARENTESIS_DER  reduce using rule 67 (argumentos -> argumento COMA argumentos .)


state 84

    (82) operacionAritmetica -> valor operador operacionAritmetica .

    COMA            reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    CORCHETE_DER    reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    PUTS            reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    CORCHETE_IZQ    reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    DEF             reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_LOCAL  reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_GLOBAL reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_INSTANCIA reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_CLASE  reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    IF              reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    $end            reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    PUNTO_Y_COMA    reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    END_BLOCK       reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    ELSE            reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    ELSIF           reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)
    PARENTESIS_DER  reduce using rule 82 (operacionAritmetica -> valor operador operacionAritmetica .)


state 85

    (31) parametro -> VARIABLE_LOCAL .
    (98) parametro_defecto -> VARIABLE_LOCAL .
    (99) parametro_defecto -> VARIABLE_LOCAL . ASIGNACION valor

  ! reduce/reduce conflict for COMA resolved using rule 31 (parametro -> VARIABLE_LOCAL .)
  ! reduce/reduce conflict for PARENTESIS_DER resolved using rule 31 (parametro -> VARIABLE_LOCAL .)
    COMA            reduce using rule 31 (parametro -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 31 (parametro -> VARIABLE_LOCAL .)
    ASIGNACION      shift and go to state 103

  ! COMA            [ reduce using rule 98 (parametro_defecto -> VARIABLE_LOCAL .) ]
  ! PARENTESIS_DER  [ reduce using rule 98 (parametro_defecto -> VARIABLE_LOCAL .) ]


state 86

    (28) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros . PARENTESIS_DER instrucciones END_BLOCK

    PARENTESIS_DER  shift and go to state 104


state 87

    (95) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto . PARENTESIS_DER instrucciones END_BLOCK

    PARENTESIS_DER  shift and go to state 105


state 88

    (29) parametros -> parametro .
    (30) parametros -> parametro . COMA parametros

    PARENTESIS_DER  reduce using rule 29 (parametros -> parametro .)
    COMA            shift and go to state 106


state 89

    (96) parametros_defecto -> parametro_defecto .
    (97) parametros_defecto -> parametro_defecto . COMA parametros_defecto

    PARENTESIS_DER  reduce using rule 96 (parametros_defecto -> parametro_defecto .)
    COMA            shift and go to state 107


state 90

    (32) parametro -> empty .

    COMA            reduce using rule 32 (parametro -> empty .)
    PARENTESIS_DER  reduce using rule 32 (parametro -> empty .)


state 91

    (16) if -> IF expresion instrucciones END_BLOCK .

    PUTS            reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    DEF             reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    IF              reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    $end            reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    ELSE            reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)
    ELSIF           reduce using rule 16 (if -> IF expresion instrucciones END_BLOCK .)


state 92

    (18) if_else -> IF expresion instrucciones ELSE . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 108
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 93

    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses . END_BLOCK
    (22) if_elsif_else -> IF expresion instrucciones elsif_clauses . ELSE instrucciones END_BLOCK

    END_BLOCK       shift and go to state 109
    ELSE            shift and go to state 110


state 94

    (24) elsif_clauses -> ELSIF . expresion instrucciones
    (25) elsif_clauses -> ELSIF . expresion THEN instrucciones
    (26) elsif_clauses -> ELSIF . expresion instrucciones elsif_clauses
    (27) elsif_clauses -> ELSIF . expresion THEN instrucciones elsif_clauses
    (33) expresion -> . var_expresion
    (34) expresion -> . var_expresion comparadores var_expresion
    (35) expresion -> . expresion comparadores expresion
    (36) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (37) expresion -> . NOT_BLOCK expresion
    (38) expresion -> . expresion operador_logico expresion
    (48) var_expresion -> . valor
    (49) var_expresion -> . booleano
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 111
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 95

    (17) if -> IF expresion THEN instrucciones . END_BLOCK
    (19) if_else -> IF expresion THEN instrucciones . ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> IF expresion THEN instrucciones . elsif_clauses END_BLOCK
    (23) if_elsif_else -> IF expresion THEN instrucciones . elsif_clauses ELSE instrucciones END_BLOCK
    (24) elsif_clauses -> . ELSIF expresion instrucciones
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (26) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (27) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       shift and go to state 112
    ELSE            shift and go to state 113
    ELSIF           shift and go to state 94

    elsif_clauses                  shift and go to state 114

state 96

    (35) expresion -> expresion comparadores expresion .
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 35 (expresion -> expresion comparadores expresion .)
    PUTS            reduce using rule 35 (expresion -> expresion comparadores expresion .)
    VARIABLE_LOCAL  reduce using rule 35 (expresion -> expresion comparadores expresion .)
    DEF             reduce using rule 35 (expresion -> expresion comparadores expresion .)
    VARIABLE_GLOBAL reduce using rule 35 (expresion -> expresion comparadores expresion .)
    VARIABLE_INSTANCIA reduce using rule 35 (expresion -> expresion comparadores expresion .)
    VARIABLE_CLASE  reduce using rule 35 (expresion -> expresion comparadores expresion .)
    IF              reduce using rule 35 (expresion -> expresion comparadores expresion .)
    PARENTESIS_DER  reduce using rule 35 (expresion -> expresion comparadores expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! MENOR_QUE       [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! DIFERENTE       [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! AND             [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! OR              [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]
  ! NOT             [ reduce using rule 35 (expresion -> expresion comparadores expresion .) ]

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 97

    (38) expresion -> expresion operador_logico expresion .
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    PUTS            reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    VARIABLE_LOCAL  reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    DEF             reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    VARIABLE_GLOBAL reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    VARIABLE_INSTANCIA reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    VARIABLE_CLASE  reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    IF              reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    PARENTESIS_DER  reduce using rule 38 (expresion -> expresion operador_logico expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! MENOR_QUE       [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! DIFERENTE       [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! AND             [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! OR              [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]
  ! NOT             [ reduce using rule 38 (expresion -> expresion operador_logico expresion .) ]

    operador_logico                shift and go to state 62
    comparadores                   shift and go to state 61

state 98

    (51) instrucciones -> instruccion instrucciones .

    END_BLOCK       reduce using rule 51 (instrucciones -> instruccion instrucciones .)
    ELSE            reduce using rule 51 (instrucciones -> instruccion instrucciones .)
    ELSIF           reduce using rule 51 (instrucciones -> instruccion instrucciones .)


state 99

    (52) instrucciones -> instruccion PUNTO_Y_COMA . instrucciones
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instruccion                    shift and go to state 63
    instrucciones                  shift and go to state 115
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 100

    (58) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ . argumentos PARENTESIS_DER
    (59) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ . PARENTESIS_DER
    (66) argumentos -> . argumento
    (67) argumentos -> . argumento COMA argumentos
    (68) argumento -> . booleano
    (69) argumento -> . operacionAritmetica
    (70) argumento -> . array
    (71) argumento -> . empty
    (64) booleano -> . FALSE
    (65) booleano -> . TRUE
    (81) operacionAritmetica -> . valor
    (82) operacionAritmetica -> . valor operador operacionAritmetica
    (12) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (72) empty -> .
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

  ! shift/reduce conflict for PARENTESIS_DER resolved as shift
    PARENTESIS_DER  shift and go to state 117
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 72 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

  ! PARENTESIS_DER  [ reduce using rule 72 (empty -> .) ]

    argumentos                     shift and go to state 116
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 101

    (34) expresion -> var_expresion comparadores var_expresion .

    THEN            reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    MAYOR_QUE       reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    MENOR_QUE       reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    IGUAL_IGUAL     reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    DIFERENTE       reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    MAYOR_IGUAL     reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    MENOR_IGUAL     reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    AND             reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    OR              reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    NOT             reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    PUTS            reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_LOCAL  reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    DEF             reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_GLOBAL reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_INSTANCIA reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_CLASE  reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    IF              reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)
    PARENTESIS_DER  reduce using rule 34 (expresion -> var_expresion comparadores var_expresion .)


state 102

    (36) expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .

    THEN            reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MAYOR_QUE       reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MENOR_QUE       reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    IGUAL_IGUAL     reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    DIFERENTE       reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MAYOR_IGUAL     reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MENOR_IGUAL     reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    AND             reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    OR              reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    NOT             reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    PUTS            reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    DEF             reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    IF              reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    PARENTESIS_DER  reduce using rule 36 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)


state 103

    (99) parametro_defecto -> VARIABLE_LOCAL ASIGNACION . valor
    (77) valor -> . NUMERO
    (78) valor -> . FLOTANTE
    (79) valor -> . CADENA
    (80) valor -> . variable
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE

    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    valor                          shift and go to state 118
    variable                       shift and go to state 35

state 104

    (28) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 119
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 105

    (95) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 120
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 106

    (30) parametros -> parametro COMA . parametros
    (29) parametros -> . parametro
    (30) parametros -> . parametro COMA parametros
    (31) parametro -> . VARIABLE_LOCAL
    (32) parametro -> . empty
    (72) empty -> .

    VARIABLE_LOCAL  shift and go to state 122
    COMA            reduce using rule 72 (empty -> .)
    PARENTESIS_DER  reduce using rule 72 (empty -> .)

    parametro                      shift and go to state 88
    parametros                     shift and go to state 121
    empty                          shift and go to state 90

state 107

    (97) parametros_defecto -> parametro_defecto COMA . parametros_defecto
    (96) parametros_defecto -> . parametro_defecto
    (97) parametros_defecto -> . parametro_defecto COMA parametros_defecto
    (98) parametro_defecto -> . VARIABLE_LOCAL
    (99) parametro_defecto -> . VARIABLE_LOCAL ASIGNACION valor

    VARIABLE_LOCAL  shift and go to state 124

    parametro_defecto              shift and go to state 89
    parametros_defecto             shift and go to state 123

state 108

    (18) if_else -> IF expresion instrucciones ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 125


state 109

    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .

    PUTS            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    DEF             reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    IF              reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    $end            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    END_BLOCK       reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    ELSE            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    ELSIF           reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)


state 110

    (22) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 126
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 111

    (24) elsif_clauses -> ELSIF expresion . instrucciones
    (25) elsif_clauses -> ELSIF expresion . THEN instrucciones
    (26) elsif_clauses -> ELSIF expresion . instrucciones elsif_clauses
    (27) elsif_clauses -> ELSIF expresion . THEN instrucciones elsif_clauses
    (35) expresion -> expresion . comparadores expresion
    (38) expresion -> expresion . operador_logico expresion
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (39) comparadores -> . MAYOR_QUE
    (40) comparadores -> . MENOR_QUE
    (41) comparadores -> . IGUAL_IGUAL
    (42) comparadores -> . DIFERENTE
    (43) comparadores -> . MAYOR_IGUAL
    (44) comparadores -> . MENOR_IGUAL
    (45) operador_logico -> . AND
    (46) operador_logico -> . OR
    (47) operador_logico -> . NOT
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    THEN            shift and go to state 128
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 127
    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 112

    (17) if -> IF expresion THEN instrucciones END_BLOCK .

    PUTS            reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    DEF             reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    IF              reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    $end            reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    ELSE            reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)
    ELSIF           reduce using rule 17 (if -> IF expresion THEN instrucciones END_BLOCK .)


state 113

    (19) if_else -> IF expresion THEN instrucciones ELSE . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 129
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 114

    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses . END_BLOCK
    (23) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses . ELSE instrucciones END_BLOCK

    END_BLOCK       shift and go to state 130
    ELSE            shift and go to state 131


state 115

    (52) instrucciones -> instruccion PUNTO_Y_COMA instrucciones .

    END_BLOCK       reduce using rule 52 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)
    ELSE            reduce using rule 52 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)
    ELSIF           reduce using rule 52 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)


state 116

    (58) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos . PARENTESIS_DER

    PARENTESIS_DER  shift and go to state 132


state 117

    (59) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .

    PUNTO_Y_COMA    reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    PUTS            reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    DEF             reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    IF              reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    END_BLOCK       reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    ELSE            reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    ELSIF           reduce using rule 59 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)


state 118

    (99) parametro_defecto -> VARIABLE_LOCAL ASIGNACION valor .

    COMA            reduce using rule 99 (parametro_defecto -> VARIABLE_LOCAL ASIGNACION valor .)
    PARENTESIS_DER  reduce using rule 99 (parametro_defecto -> VARIABLE_LOCAL ASIGNACION valor .)


state 119

    (28) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 133


state 120

    (95) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 134


state 121

    (30) parametros -> parametro COMA parametros .

    PARENTESIS_DER  reduce using rule 30 (parametros -> parametro COMA parametros .)


state 122

    (31) parametro -> VARIABLE_LOCAL .

    COMA            reduce using rule 31 (parametro -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 31 (parametro -> VARIABLE_LOCAL .)


state 123

    (97) parametros_defecto -> parametro_defecto COMA parametros_defecto .

    PARENTESIS_DER  reduce using rule 97 (parametros_defecto -> parametro_defecto COMA parametros_defecto .)


state 124

    (98) parametro_defecto -> VARIABLE_LOCAL .
    (99) parametro_defecto -> VARIABLE_LOCAL . ASIGNACION valor

    COMA            reduce using rule 98 (parametro_defecto -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 98 (parametro_defecto -> VARIABLE_LOCAL .)
    ASIGNACION      shift and go to state 103


state 125

    (18) if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 18 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)


state 126

    (22) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 135


state 127

    (24) elsif_clauses -> ELSIF expresion instrucciones .
    (26) elsif_clauses -> ELSIF expresion instrucciones . elsif_clauses
    (24) elsif_clauses -> . ELSIF expresion instrucciones
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (26) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (27) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       reduce using rule 24 (elsif_clauses -> ELSIF expresion instrucciones .)
    ELSE            reduce using rule 24 (elsif_clauses -> ELSIF expresion instrucciones .)
    ELSIF           shift and go to state 94

    elsif_clauses                  shift and go to state 136

state 128

    (25) elsif_clauses -> ELSIF expresion THEN . instrucciones
    (27) elsif_clauses -> ELSIF expresion THEN . instrucciones elsif_clauses
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 137
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 129

    (19) if_else -> IF expresion THEN instrucciones ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 138


state 130

    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .

    PUTS            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    DEF             reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    IF              reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    $end            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    END_BLOCK       reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    ELSE            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    ELSIF           reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)


state 131

    (23) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE . instrucciones END_BLOCK
    (50) instrucciones -> . instruccion
    (51) instrucciones -> . instruccion instrucciones
    (52) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (53) instruccion -> . asignacion
    (54) instruccion -> . impresion
    (55) instruccion -> . condicion
    (56) instruccion -> . llamada_funcion
    (57) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (10) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) impresion -> . PUTS
    (13) condicion -> . if
    (14) condicion -> . if_else
    (15) condicion -> . if_elsif_else
    (58) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (59) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (28) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (95) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK
    (60) variable -> . VARIABLE_LOCAL
    (61) variable -> . VARIABLE_GLOBAL
    (62) variable -> . VARIABLE_INSTANCIA
    (63) variable -> . VARIABLE_CLASE
    (16) if -> . IF expresion instrucciones END_BLOCK
    (17) if -> . IF expresion THEN instrucciones END_BLOCK
    (18) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (19) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (22) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (23) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 139
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 132

    (58) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .

    PUNTO_Y_COMA    reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    PUTS            reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    DEF             reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    IF              reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    END_BLOCK       reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSE            reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSIF           reduce using rule 58 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)


state 133

    (28) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .

    PUTS            reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    DEF             reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    IF              reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    $end            reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    ELSE            reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    ELSIF           reduce using rule 28 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)


state 134

    (95) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .

    PUTS            reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    DEF             reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    IF              reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    $end            reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    ELSE            reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)
    ELSIF           reduce using rule 95 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros_defecto PARENTESIS_DER instrucciones END_BLOCK .)


state 135

    (22) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 22 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)


state 136

    (26) elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .

    END_BLOCK       reduce using rule 26 (elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .)
    ELSE            reduce using rule 26 (elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .)


state 137

    (25) elsif_clauses -> ELSIF expresion THEN instrucciones .
    (27) elsif_clauses -> ELSIF expresion THEN instrucciones . elsif_clauses
    (24) elsif_clauses -> . ELSIF expresion instrucciones
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (26) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (27) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       reduce using rule 25 (elsif_clauses -> ELSIF expresion THEN instrucciones .)
    ELSE            reduce using rule 25 (elsif_clauses -> ELSIF expresion THEN instrucciones .)
    ELSIF           shift and go to state 94

    elsif_clauses                  shift and go to state 140

state 138

    (19) if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 19 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)


state 139

    (23) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 141


state 140

    (27) elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .

    END_BLOCK       reduce using rule 27 (elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .)
    ELSE            reduce using rule 27 (elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .)


state 141

    (23) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 23 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAYOR_QUE in state 38 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 38 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 38 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 81 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 81 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 81 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT in state 81 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 96 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 96 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 96 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT in state 96 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 97 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 97 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 97 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT in state 97 resolved as shift
WARNING: shift/reduce conflict for PARENTESIS_DER in state 100 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (parametro -> VARIABLE_LOCAL)
WARNING: rejected rule (parametro_defecto -> VARIABLE_LOCAL) in state 85
