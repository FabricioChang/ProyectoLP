Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND_BLOCK
    BEGIN_BLOCK
    BREAK
    CASE
    CLASS
    COMENTARIO
    DEFINED
    DO
    DOSPUNTOS
    DOSPUNTOS_IGUAL
    END
    ENSURE
    FLECHA_HASH
    IN
    INTERROGACION
    LENGTH
    LLAVE_DER
    LLAVE_IZQ
    MODULE
    NEXT
    PUNTO
    REDO
    RESERVADA
    RETRY
    RETURN
    SELF
    SUPER
    UNLESS
    UNTIL
    WHEN
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencia
Rule 2     programa -> sentencia programa
Rule 3     sentencia -> asignacion
Rule 4     sentencia -> impresion
Rule 5     sentencia -> array
Rule 6     sentencia -> condicion
Rule 7     sentencia -> funcion
Rule 8     asignacion -> variable ASIGNACION valores
Rule 9     impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
Rule 10    array -> CORCHETE_IZQ argumentos CORCHETE_DER
Rule 11    condicion -> if
Rule 12    condicion -> if_else
Rule 13    condicion -> if_elsif_else
Rule 14    if -> IF expresion instrucciones END_BLOCK
Rule 15    if -> IF expresion THEN instrucciones END_BLOCK
Rule 16    if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK
Rule 17    if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
Rule 18    if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK
Rule 19    if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK
Rule 20    if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
Rule 21    if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
Rule 22    elsif_clauses -> ELSIF expresion instrucciones
Rule 23    elsif_clauses -> ELSIF expresion THEN instrucciones
Rule 24    elsif_clauses -> ELSIF expresion instrucciones elsif_clauses
Rule 25    elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses
Rule 26    funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
Rule 27    parametros -> parametro
Rule 28    parametros -> parametro COMA parametros
Rule 29    parametro -> VARIABLE_LOCAL
Rule 30    parametro -> empty
Rule 31    expresion -> var_expresion
Rule 32    expresion -> var_expresion comparadores var_expresion
Rule 33    expresion -> expresion comparadores expresion
Rule 34    expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER
Rule 35    expresion -> NOT_BLOCK expresion
Rule 36    expresion -> expresion operador_logico expresion
Rule 37    comparadores -> MAYOR_QUE
Rule 38    comparadores -> MENOR_QUE
Rule 39    comparadores -> IGUAL_IGUAL
Rule 40    comparadores -> DIFERENTE
Rule 41    comparadores -> MAYOR_IGUAL
Rule 42    comparadores -> MENOR_IGUAL
Rule 43    operador_logico -> AND
Rule 44    operador_logico -> OR
Rule 45    operador_logico -> NOT
Rule 46    var_expresion -> valor
Rule 47    var_expresion -> booleano
Rule 48    instrucciones -> instruccion
Rule 49    instrucciones -> instruccion instrucciones
Rule 50    instrucciones -> instruccion PUNTO_Y_COMA instrucciones
Rule 51    instruccion -> asignacion
Rule 52    instruccion -> impresion
Rule 53    instruccion -> condicion
Rule 54    instruccion -> llamada_funcion
Rule 55    instruccion -> funcion
Rule 56    llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
Rule 57    llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
Rule 58    variable -> VARIABLE_LOCAL
Rule 59    variable -> VARIABLE_GLOBAL
Rule 60    variable -> VARIABLE_INSTANCIA
Rule 61    variable -> VARIABLE_CLASE
Rule 62    booleano -> FALSE
Rule 63    booleano -> TRUE
Rule 64    argumentos -> argumento
Rule 65    argumentos -> argumento COMA argumentos
Rule 66    argumento -> booleano
Rule 67    argumento -> operacionAritmetica
Rule 68    argumento -> array
Rule 69    argumento -> empty
Rule 70    empty -> <empty>
Rule 71    valores -> operacionAritmetica
Rule 72    valores -> SIMBOLO
Rule 73    valores -> booleano
Rule 74    valores -> array
Rule 75    valor -> NUMERO
Rule 76    valor -> FLOTANTE
Rule 77    valor -> CADENA
Rule 78    valor -> variable
Rule 79    operacionAritmetica -> valor
Rule 80    operacionAritmetica -> valor operador operacionAritmetica
Rule 81    operador -> MAS
Rule 82    operador -> MENOS
Rule 83    operador -> MULTIPLICAR
Rule 84    operador -> DIVIDIR
Rule 85    operador -> MODULO
Rule 86    operador -> EXPONENCIACION

Terminals, with rules where they appear

ALIAS                : 
AND                  : 43
AND_BLOCK            : 
ASIGNACION           : 8
BEGIN_BLOCK          : 
BREAK                : 
CADENA               : 77
CASE                 : 
CLASS                : 
COMA                 : 28 65
COMENTARIO           : 
CORCHETE_DER         : 10
CORCHETE_IZQ         : 10
DEF                  : 26
DEFINED              : 
DIFERENTE            : 40
DIVIDIR              : 84
DO                   : 
DOSPUNTOS            : 
DOSPUNTOS_IGUAL      : 
ELSE                 : 16 17 20 21
ELSIF                : 22 23 24 25
END                  : 
END_BLOCK            : 14 15 16 17 18 19 20 21 26
ENSURE               : 
EXPONENCIACION       : 86
FALSE                : 62
FLECHA_HASH          : 
FLOTANTE             : 76
IF                   : 14 15 16 17 18 19 20 21
IGUAL_IGUAL          : 39
IN                   : 
INTERROGACION        : 
LENGTH               : 
LLAVE_DER            : 
LLAVE_IZQ            : 
MAS                  : 81
MAYOR_IGUAL          : 41
MAYOR_QUE            : 37
MENOR_IGUAL          : 42
MENOR_QUE            : 38
MENOS                : 82
MODULE               : 
MODULO               : 85
MULTIPLICAR          : 83
NEXT                 : 
NOT                  : 45
NOT_BLOCK            : 35
NUMERO               : 75
OR                   : 44
PARENTESIS_DER       : 9 26 34 56 57
PARENTESIS_IZQ       : 9 26 34 56 57
PUNTO                : 
PUNTO_Y_COMA         : 50
PUTS                 : 9
REDO                 : 
RESERVADA            : 
RETRY                : 
RETURN               : 
SELF                 : 
SIMBOLO              : 72
SUPER                : 
THEN                 : 15 17 19 21 23 25
TRUE                 : 63
UNLESS               : 
UNTIL                : 
VARIABLE_CLASE       : 61
VARIABLE_GLOBAL      : 59
VARIABLE_INSTANCIA   : 60
VARIABLE_LOCAL       : 26 29 56 57 58
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

argumento            : 64 65
argumentos           : 9 10 56 65
array                : 5 68 74
asignacion           : 3 51
booleano             : 47 66 73
comparadores         : 32 33
condicion            : 6 53
elsif_clauses        : 18 19 20 21 24 25
empty                : 30 69
expresion            : 14 15 16 17 18 19 20 21 22 23 24 25 33 33 34 35 36 36
funcion              : 7 55
if                   : 11
if_else              : 12
if_elsif_else        : 13
impresion            : 4 52
instruccion          : 48 49 50
instrucciones        : 14 15 16 16 17 17 18 19 20 20 21 21 22 23 24 25 26 49 50
llamada_funcion      : 54
operacionAritmetica  : 67 71 80
operador             : 80
operador_logico      : 36
parametro            : 27 28
parametros           : 26 28
programa             : 2 0
sentencia            : 1 2
valor                : 46 79 80
valores              : 8
var_expresion        : 31 32 32
variable             : 8 78

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencia
    (2) programa -> . sentencia programa
    (3) sentencia -> . asignacion
    (4) sentencia -> . impresion
    (5) sentencia -> . array
    (6) sentencia -> . condicion
    (7) sentencia -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    CORCHETE_IZQ    shift and go to state 10
    DEF             shift and go to state 14
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    programa                       shift and go to state 1
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    array                          shift and go to state 5
    condicion                      shift and go to state 6
    funcion                        shift and go to state 7
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencia .
    (2) programa -> sentencia . programa
    (1) programa -> . sentencia
    (2) programa -> . sentencia programa
    (3) sentencia -> . asignacion
    (4) sentencia -> . impresion
    (5) sentencia -> . array
    (6) sentencia -> . condicion
    (7) sentencia -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    $end            reduce using rule 1 (programa -> sentencia .)
    PUTS            shift and go to state 9
    CORCHETE_IZQ    shift and go to state 10
    DEF             shift and go to state 14
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    sentencia                      shift and go to state 2
    programa                       shift and go to state 20
    asignacion                     shift and go to state 3
    impresion                      shift and go to state 4
    array                          shift and go to state 5
    condicion                      shift and go to state 6
    funcion                        shift and go to state 7
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 3

    (3) sentencia -> asignacion .

    PUTS            reduce using rule 3 (sentencia -> asignacion .)
    CORCHETE_IZQ    reduce using rule 3 (sentencia -> asignacion .)
    DEF             reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_LOCAL  reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_GLOBAL reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_INSTANCIA reduce using rule 3 (sentencia -> asignacion .)
    VARIABLE_CLASE  reduce using rule 3 (sentencia -> asignacion .)
    IF              reduce using rule 3 (sentencia -> asignacion .)
    $end            reduce using rule 3 (sentencia -> asignacion .)


state 4

    (4) sentencia -> impresion .

    PUTS            reduce using rule 4 (sentencia -> impresion .)
    CORCHETE_IZQ    reduce using rule 4 (sentencia -> impresion .)
    DEF             reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_LOCAL  reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_GLOBAL reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_INSTANCIA reduce using rule 4 (sentencia -> impresion .)
    VARIABLE_CLASE  reduce using rule 4 (sentencia -> impresion .)
    IF              reduce using rule 4 (sentencia -> impresion .)
    $end            reduce using rule 4 (sentencia -> impresion .)


state 5

    (5) sentencia -> array .

    PUTS            reduce using rule 5 (sentencia -> array .)
    CORCHETE_IZQ    reduce using rule 5 (sentencia -> array .)
    DEF             reduce using rule 5 (sentencia -> array .)
    VARIABLE_LOCAL  reduce using rule 5 (sentencia -> array .)
    VARIABLE_GLOBAL reduce using rule 5 (sentencia -> array .)
    VARIABLE_INSTANCIA reduce using rule 5 (sentencia -> array .)
    VARIABLE_CLASE  reduce using rule 5 (sentencia -> array .)
    IF              reduce using rule 5 (sentencia -> array .)
    $end            reduce using rule 5 (sentencia -> array .)


state 6

    (6) sentencia -> condicion .

    PUTS            reduce using rule 6 (sentencia -> condicion .)
    CORCHETE_IZQ    reduce using rule 6 (sentencia -> condicion .)
    DEF             reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_LOCAL  reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_GLOBAL reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_INSTANCIA reduce using rule 6 (sentencia -> condicion .)
    VARIABLE_CLASE  reduce using rule 6 (sentencia -> condicion .)
    IF              reduce using rule 6 (sentencia -> condicion .)
    $end            reduce using rule 6 (sentencia -> condicion .)


state 7

    (7) sentencia -> funcion .

    PUTS            reduce using rule 7 (sentencia -> funcion .)
    CORCHETE_IZQ    reduce using rule 7 (sentencia -> funcion .)
    DEF             reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_LOCAL  reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_GLOBAL reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_INSTANCIA reduce using rule 7 (sentencia -> funcion .)
    VARIABLE_CLASE  reduce using rule 7 (sentencia -> funcion .)
    IF              reduce using rule 7 (sentencia -> funcion .)
    $end            reduce using rule 7 (sentencia -> funcion .)


state 8

    (8) asignacion -> variable . ASIGNACION valores

    ASIGNACION      shift and go to state 21


state 9

    (9) impresion -> PUTS . PARENTESIS_IZQ argumentos PARENTESIS_DER

    PARENTESIS_IZQ  shift and go to state 22


state 10

    (10) array -> CORCHETE_IZQ . argumentos CORCHETE_DER
    (64) argumentos -> . argumento
    (65) argumentos -> . argumento COMA argumentos
    (66) argumento -> . booleano
    (67) argumento -> . operacionAritmetica
    (68) argumento -> . array
    (69) argumento -> . empty
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (70) empty -> .
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 70 (empty -> .)
    CORCHETE_DER    reduce using rule 70 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumentos                     shift and go to state 23
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 11

    (11) condicion -> if .

    PUTS            reduce using rule 11 (condicion -> if .)
    CORCHETE_IZQ    reduce using rule 11 (condicion -> if .)
    DEF             reduce using rule 11 (condicion -> if .)
    VARIABLE_LOCAL  reduce using rule 11 (condicion -> if .)
    VARIABLE_GLOBAL reduce using rule 11 (condicion -> if .)
    VARIABLE_INSTANCIA reduce using rule 11 (condicion -> if .)
    VARIABLE_CLASE  reduce using rule 11 (condicion -> if .)
    IF              reduce using rule 11 (condicion -> if .)
    $end            reduce using rule 11 (condicion -> if .)
    PUNTO_Y_COMA    reduce using rule 11 (condicion -> if .)
    END_BLOCK       reduce using rule 11 (condicion -> if .)
    ELSE            reduce using rule 11 (condicion -> if .)
    ELSIF           reduce using rule 11 (condicion -> if .)


state 12

    (12) condicion -> if_else .

    PUTS            reduce using rule 12 (condicion -> if_else .)
    CORCHETE_IZQ    reduce using rule 12 (condicion -> if_else .)
    DEF             reduce using rule 12 (condicion -> if_else .)
    VARIABLE_LOCAL  reduce using rule 12 (condicion -> if_else .)
    VARIABLE_GLOBAL reduce using rule 12 (condicion -> if_else .)
    VARIABLE_INSTANCIA reduce using rule 12 (condicion -> if_else .)
    VARIABLE_CLASE  reduce using rule 12 (condicion -> if_else .)
    IF              reduce using rule 12 (condicion -> if_else .)
    $end            reduce using rule 12 (condicion -> if_else .)
    PUNTO_Y_COMA    reduce using rule 12 (condicion -> if_else .)
    END_BLOCK       reduce using rule 12 (condicion -> if_else .)
    ELSE            reduce using rule 12 (condicion -> if_else .)
    ELSIF           reduce using rule 12 (condicion -> if_else .)


state 13

    (13) condicion -> if_elsif_else .

    PUTS            reduce using rule 13 (condicion -> if_elsif_else .)
    CORCHETE_IZQ    reduce using rule 13 (condicion -> if_elsif_else .)
    DEF             reduce using rule 13 (condicion -> if_elsif_else .)
    VARIABLE_LOCAL  reduce using rule 13 (condicion -> if_elsif_else .)
    VARIABLE_GLOBAL reduce using rule 13 (condicion -> if_elsif_else .)
    VARIABLE_INSTANCIA reduce using rule 13 (condicion -> if_elsif_else .)
    VARIABLE_CLASE  reduce using rule 13 (condicion -> if_elsif_else .)
    IF              reduce using rule 13 (condicion -> if_elsif_else .)
    $end            reduce using rule 13 (condicion -> if_elsif_else .)
    PUNTO_Y_COMA    reduce using rule 13 (condicion -> if_elsif_else .)
    END_BLOCK       reduce using rule 13 (condicion -> if_elsif_else .)
    ELSE            reduce using rule 13 (condicion -> if_elsif_else .)
    ELSIF           reduce using rule 13 (condicion -> if_elsif_else .)


state 14

    (26) funcion -> DEF . VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK

    VARIABLE_LOCAL  shift and go to state 36


state 15

    (58) variable -> VARIABLE_LOCAL .

    ASIGNACION      reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MAS             reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MENOS           reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MULTIPLICAR     reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    DIVIDIR         reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MODULO          reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    EXPONENCIACION  reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    COMA            reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    CORCHETE_DER    reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MAYOR_QUE       reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MENOR_QUE       reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    IGUAL_IGUAL     reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    DIFERENTE       reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MAYOR_IGUAL     reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    MENOR_IGUAL     reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    THEN            reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    AND             reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    OR              reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    NOT             reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    PUTS            reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    VARIABLE_LOCAL  reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    DEF             reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    VARIABLE_GLOBAL reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    VARIABLE_INSTANCIA reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    VARIABLE_CLASE  reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    IF              reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    CORCHETE_IZQ    reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    $end            reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    PUNTO_Y_COMA    reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    END_BLOCK       reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    ELSE            reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    ELSIF           reduce using rule 58 (variable -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 58 (variable -> VARIABLE_LOCAL .)


state 16

    (59) variable -> VARIABLE_GLOBAL .

    ASIGNACION      reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MAS             reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MENOS           reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MULTIPLICAR     reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    DIVIDIR         reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MODULO          reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    EXPONENCIACION  reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    COMA            reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    CORCHETE_DER    reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MAYOR_QUE       reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MENOR_QUE       reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    IGUAL_IGUAL     reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    DIFERENTE       reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MAYOR_IGUAL     reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    MENOR_IGUAL     reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    THEN            reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    AND             reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    OR              reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    NOT             reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    PUTS            reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_LOCAL  reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    DEF             reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_GLOBAL reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_INSTANCIA reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    VARIABLE_CLASE  reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    IF              reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    CORCHETE_IZQ    reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    $end            reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    PUNTO_Y_COMA    reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    END_BLOCK       reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    ELSE            reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    ELSIF           reduce using rule 59 (variable -> VARIABLE_GLOBAL .)
    PARENTESIS_DER  reduce using rule 59 (variable -> VARIABLE_GLOBAL .)


state 17

    (60) variable -> VARIABLE_INSTANCIA .

    ASIGNACION      reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MAS             reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MENOS           reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MULTIPLICAR     reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    DIVIDIR         reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MODULO          reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    EXPONENCIACION  reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    COMA            reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    CORCHETE_DER    reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MAYOR_QUE       reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MENOR_QUE       reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    IGUAL_IGUAL     reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    DIFERENTE       reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MAYOR_IGUAL     reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    MENOR_IGUAL     reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    THEN            reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    AND             reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    OR              reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    NOT             reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    PUTS            reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_LOCAL  reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    DEF             reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_GLOBAL reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_INSTANCIA reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    VARIABLE_CLASE  reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    IF              reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    CORCHETE_IZQ    reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    $end            reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    PUNTO_Y_COMA    reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    END_BLOCK       reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    ELSE            reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    ELSIF           reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)
    PARENTESIS_DER  reduce using rule 60 (variable -> VARIABLE_INSTANCIA .)


state 18

    (61) variable -> VARIABLE_CLASE .

    ASIGNACION      reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MAS             reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MENOS           reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MULTIPLICAR     reduce using rule 61 (variable -> VARIABLE_CLASE .)
    DIVIDIR         reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MODULO          reduce using rule 61 (variable -> VARIABLE_CLASE .)
    EXPONENCIACION  reduce using rule 61 (variable -> VARIABLE_CLASE .)
    COMA            reduce using rule 61 (variable -> VARIABLE_CLASE .)
    CORCHETE_DER    reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MAYOR_QUE       reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MENOR_QUE       reduce using rule 61 (variable -> VARIABLE_CLASE .)
    IGUAL_IGUAL     reduce using rule 61 (variable -> VARIABLE_CLASE .)
    DIFERENTE       reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MAYOR_IGUAL     reduce using rule 61 (variable -> VARIABLE_CLASE .)
    MENOR_IGUAL     reduce using rule 61 (variable -> VARIABLE_CLASE .)
    THEN            reduce using rule 61 (variable -> VARIABLE_CLASE .)
    AND             reduce using rule 61 (variable -> VARIABLE_CLASE .)
    OR              reduce using rule 61 (variable -> VARIABLE_CLASE .)
    NOT             reduce using rule 61 (variable -> VARIABLE_CLASE .)
    PUTS            reduce using rule 61 (variable -> VARIABLE_CLASE .)
    VARIABLE_LOCAL  reduce using rule 61 (variable -> VARIABLE_CLASE .)
    DEF             reduce using rule 61 (variable -> VARIABLE_CLASE .)
    VARIABLE_GLOBAL reduce using rule 61 (variable -> VARIABLE_CLASE .)
    VARIABLE_INSTANCIA reduce using rule 61 (variable -> VARIABLE_CLASE .)
    VARIABLE_CLASE  reduce using rule 61 (variable -> VARIABLE_CLASE .)
    IF              reduce using rule 61 (variable -> VARIABLE_CLASE .)
    CORCHETE_IZQ    reduce using rule 61 (variable -> VARIABLE_CLASE .)
    $end            reduce using rule 61 (variable -> VARIABLE_CLASE .)
    PUNTO_Y_COMA    reduce using rule 61 (variable -> VARIABLE_CLASE .)
    END_BLOCK       reduce using rule 61 (variable -> VARIABLE_CLASE .)
    ELSE            reduce using rule 61 (variable -> VARIABLE_CLASE .)
    ELSIF           reduce using rule 61 (variable -> VARIABLE_CLASE .)
    PARENTESIS_DER  reduce using rule 61 (variable -> VARIABLE_CLASE .)


state 19

    (14) if -> IF . expresion instrucciones END_BLOCK
    (15) if -> IF . expresion THEN instrucciones END_BLOCK
    (16) if_else -> IF . expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> IF . expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> IF . expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> IF . expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> IF . expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> IF . expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 37
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 20

    (2) programa -> sentencia programa .

    $end            reduce using rule 2 (programa -> sentencia programa .)


state 21

    (8) asignacion -> variable ASIGNACION . valores
    (71) valores -> . operacionAritmetica
    (72) valores -> . SIMBOLO
    (73) valores -> . booleano
    (74) valores -> . array
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    SIMBOLO         shift and go to state 45
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    variable                       shift and go to state 35
    valores                        shift and go to state 43
    operacionAritmetica            shift and go to state 44
    booleano                       shift and go to state 46
    array                          shift and go to state 47
    valor                          shift and go to state 31

state 22

    (9) impresion -> PUTS PARENTESIS_IZQ . argumentos PARENTESIS_DER
    (64) argumentos -> . argumento
    (65) argumentos -> . argumento COMA argumentos
    (66) argumento -> . booleano
    (67) argumento -> . operacionAritmetica
    (68) argumento -> . array
    (69) argumento -> . empty
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (70) empty -> .
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 70 (empty -> .)
    PARENTESIS_DER  reduce using rule 70 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumentos                     shift and go to state 48
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 23

    (10) array -> CORCHETE_IZQ argumentos . CORCHETE_DER

    CORCHETE_DER    shift and go to state 49


state 24

    (64) argumentos -> argumento .
    (65) argumentos -> argumento . COMA argumentos

    CORCHETE_DER    reduce using rule 64 (argumentos -> argumento .)
    PARENTESIS_DER  reduce using rule 64 (argumentos -> argumento .)
    COMA            shift and go to state 50


state 25

    (66) argumento -> booleano .

    COMA            reduce using rule 66 (argumento -> booleano .)
    CORCHETE_DER    reduce using rule 66 (argumento -> booleano .)
    PARENTESIS_DER  reduce using rule 66 (argumento -> booleano .)


state 26

    (67) argumento -> operacionAritmetica .

    COMA            reduce using rule 67 (argumento -> operacionAritmetica .)
    CORCHETE_DER    reduce using rule 67 (argumento -> operacionAritmetica .)
    PARENTESIS_DER  reduce using rule 67 (argumento -> operacionAritmetica .)


state 27

    (68) argumento -> array .

    COMA            reduce using rule 68 (argumento -> array .)
    CORCHETE_DER    reduce using rule 68 (argumento -> array .)
    PARENTESIS_DER  reduce using rule 68 (argumento -> array .)


state 28

    (69) argumento -> empty .

    COMA            reduce using rule 69 (argumento -> empty .)
    CORCHETE_DER    reduce using rule 69 (argumento -> empty .)
    PARENTESIS_DER  reduce using rule 69 (argumento -> empty .)


state 29

    (62) booleano -> FALSE .

    COMA            reduce using rule 62 (booleano -> FALSE .)
    CORCHETE_DER    reduce using rule 62 (booleano -> FALSE .)
    MAYOR_QUE       reduce using rule 62 (booleano -> FALSE .)
    MENOR_QUE       reduce using rule 62 (booleano -> FALSE .)
    IGUAL_IGUAL     reduce using rule 62 (booleano -> FALSE .)
    DIFERENTE       reduce using rule 62 (booleano -> FALSE .)
    MAYOR_IGUAL     reduce using rule 62 (booleano -> FALSE .)
    MENOR_IGUAL     reduce using rule 62 (booleano -> FALSE .)
    THEN            reduce using rule 62 (booleano -> FALSE .)
    AND             reduce using rule 62 (booleano -> FALSE .)
    OR              reduce using rule 62 (booleano -> FALSE .)
    NOT             reduce using rule 62 (booleano -> FALSE .)
    PUTS            reduce using rule 62 (booleano -> FALSE .)
    VARIABLE_LOCAL  reduce using rule 62 (booleano -> FALSE .)
    DEF             reduce using rule 62 (booleano -> FALSE .)
    VARIABLE_GLOBAL reduce using rule 62 (booleano -> FALSE .)
    VARIABLE_INSTANCIA reduce using rule 62 (booleano -> FALSE .)
    VARIABLE_CLASE  reduce using rule 62 (booleano -> FALSE .)
    IF              reduce using rule 62 (booleano -> FALSE .)
    CORCHETE_IZQ    reduce using rule 62 (booleano -> FALSE .)
    $end            reduce using rule 62 (booleano -> FALSE .)
    PUNTO_Y_COMA    reduce using rule 62 (booleano -> FALSE .)
    END_BLOCK       reduce using rule 62 (booleano -> FALSE .)
    ELSE            reduce using rule 62 (booleano -> FALSE .)
    ELSIF           reduce using rule 62 (booleano -> FALSE .)
    PARENTESIS_DER  reduce using rule 62 (booleano -> FALSE .)


state 30

    (63) booleano -> TRUE .

    COMA            reduce using rule 63 (booleano -> TRUE .)
    CORCHETE_DER    reduce using rule 63 (booleano -> TRUE .)
    MAYOR_QUE       reduce using rule 63 (booleano -> TRUE .)
    MENOR_QUE       reduce using rule 63 (booleano -> TRUE .)
    IGUAL_IGUAL     reduce using rule 63 (booleano -> TRUE .)
    DIFERENTE       reduce using rule 63 (booleano -> TRUE .)
    MAYOR_IGUAL     reduce using rule 63 (booleano -> TRUE .)
    MENOR_IGUAL     reduce using rule 63 (booleano -> TRUE .)
    THEN            reduce using rule 63 (booleano -> TRUE .)
    AND             reduce using rule 63 (booleano -> TRUE .)
    OR              reduce using rule 63 (booleano -> TRUE .)
    NOT             reduce using rule 63 (booleano -> TRUE .)
    PUTS            reduce using rule 63 (booleano -> TRUE .)
    VARIABLE_LOCAL  reduce using rule 63 (booleano -> TRUE .)
    DEF             reduce using rule 63 (booleano -> TRUE .)
    VARIABLE_GLOBAL reduce using rule 63 (booleano -> TRUE .)
    VARIABLE_INSTANCIA reduce using rule 63 (booleano -> TRUE .)
    VARIABLE_CLASE  reduce using rule 63 (booleano -> TRUE .)
    IF              reduce using rule 63 (booleano -> TRUE .)
    CORCHETE_IZQ    reduce using rule 63 (booleano -> TRUE .)
    $end            reduce using rule 63 (booleano -> TRUE .)
    PUNTO_Y_COMA    reduce using rule 63 (booleano -> TRUE .)
    END_BLOCK       reduce using rule 63 (booleano -> TRUE .)
    ELSE            reduce using rule 63 (booleano -> TRUE .)
    ELSIF           reduce using rule 63 (booleano -> TRUE .)
    PARENTESIS_DER  reduce using rule 63 (booleano -> TRUE .)


state 31

    (79) operacionAritmetica -> valor .
    (80) operacionAritmetica -> valor . operador operacionAritmetica
    (81) operador -> . MAS
    (82) operador -> . MENOS
    (83) operador -> . MULTIPLICAR
    (84) operador -> . DIVIDIR
    (85) operador -> . MODULO
    (86) operador -> . EXPONENCIACION

    COMA            reduce using rule 79 (operacionAritmetica -> valor .)
    CORCHETE_DER    reduce using rule 79 (operacionAritmetica -> valor .)
    PUTS            reduce using rule 79 (operacionAritmetica -> valor .)
    CORCHETE_IZQ    reduce using rule 79 (operacionAritmetica -> valor .)
    DEF             reduce using rule 79 (operacionAritmetica -> valor .)
    VARIABLE_LOCAL  reduce using rule 79 (operacionAritmetica -> valor .)
    VARIABLE_GLOBAL reduce using rule 79 (operacionAritmetica -> valor .)
    VARIABLE_INSTANCIA reduce using rule 79 (operacionAritmetica -> valor .)
    VARIABLE_CLASE  reduce using rule 79 (operacionAritmetica -> valor .)
    IF              reduce using rule 79 (operacionAritmetica -> valor .)
    $end            reduce using rule 79 (operacionAritmetica -> valor .)
    PUNTO_Y_COMA    reduce using rule 79 (operacionAritmetica -> valor .)
    END_BLOCK       reduce using rule 79 (operacionAritmetica -> valor .)
    ELSE            reduce using rule 79 (operacionAritmetica -> valor .)
    ELSIF           reduce using rule 79 (operacionAritmetica -> valor .)
    PARENTESIS_DER  reduce using rule 79 (operacionAritmetica -> valor .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    MULTIPLICAR     shift and go to state 54
    DIVIDIR         shift and go to state 55
    MODULO          shift and go to state 56
    EXPONENCIACION  shift and go to state 57

    operador                       shift and go to state 51

state 32

    (75) valor -> NUMERO .

    MAS             reduce using rule 75 (valor -> NUMERO .)
    MENOS           reduce using rule 75 (valor -> NUMERO .)
    MULTIPLICAR     reduce using rule 75 (valor -> NUMERO .)
    DIVIDIR         reduce using rule 75 (valor -> NUMERO .)
    MODULO          reduce using rule 75 (valor -> NUMERO .)
    EXPONENCIACION  reduce using rule 75 (valor -> NUMERO .)
    COMA            reduce using rule 75 (valor -> NUMERO .)
    CORCHETE_DER    reduce using rule 75 (valor -> NUMERO .)
    MAYOR_QUE       reduce using rule 75 (valor -> NUMERO .)
    MENOR_QUE       reduce using rule 75 (valor -> NUMERO .)
    IGUAL_IGUAL     reduce using rule 75 (valor -> NUMERO .)
    DIFERENTE       reduce using rule 75 (valor -> NUMERO .)
    MAYOR_IGUAL     reduce using rule 75 (valor -> NUMERO .)
    MENOR_IGUAL     reduce using rule 75 (valor -> NUMERO .)
    THEN            reduce using rule 75 (valor -> NUMERO .)
    AND             reduce using rule 75 (valor -> NUMERO .)
    OR              reduce using rule 75 (valor -> NUMERO .)
    NOT             reduce using rule 75 (valor -> NUMERO .)
    PUTS            reduce using rule 75 (valor -> NUMERO .)
    VARIABLE_LOCAL  reduce using rule 75 (valor -> NUMERO .)
    DEF             reduce using rule 75 (valor -> NUMERO .)
    VARIABLE_GLOBAL reduce using rule 75 (valor -> NUMERO .)
    VARIABLE_INSTANCIA reduce using rule 75 (valor -> NUMERO .)
    VARIABLE_CLASE  reduce using rule 75 (valor -> NUMERO .)
    IF              reduce using rule 75 (valor -> NUMERO .)
    CORCHETE_IZQ    reduce using rule 75 (valor -> NUMERO .)
    $end            reduce using rule 75 (valor -> NUMERO .)
    PUNTO_Y_COMA    reduce using rule 75 (valor -> NUMERO .)
    END_BLOCK       reduce using rule 75 (valor -> NUMERO .)
    ELSE            reduce using rule 75 (valor -> NUMERO .)
    ELSIF           reduce using rule 75 (valor -> NUMERO .)
    PARENTESIS_DER  reduce using rule 75 (valor -> NUMERO .)


state 33

    (76) valor -> FLOTANTE .

    MAS             reduce using rule 76 (valor -> FLOTANTE .)
    MENOS           reduce using rule 76 (valor -> FLOTANTE .)
    MULTIPLICAR     reduce using rule 76 (valor -> FLOTANTE .)
    DIVIDIR         reduce using rule 76 (valor -> FLOTANTE .)
    MODULO          reduce using rule 76 (valor -> FLOTANTE .)
    EXPONENCIACION  reduce using rule 76 (valor -> FLOTANTE .)
    COMA            reduce using rule 76 (valor -> FLOTANTE .)
    CORCHETE_DER    reduce using rule 76 (valor -> FLOTANTE .)
    MAYOR_QUE       reduce using rule 76 (valor -> FLOTANTE .)
    MENOR_QUE       reduce using rule 76 (valor -> FLOTANTE .)
    IGUAL_IGUAL     reduce using rule 76 (valor -> FLOTANTE .)
    DIFERENTE       reduce using rule 76 (valor -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 76 (valor -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 76 (valor -> FLOTANTE .)
    THEN            reduce using rule 76 (valor -> FLOTANTE .)
    AND             reduce using rule 76 (valor -> FLOTANTE .)
    OR              reduce using rule 76 (valor -> FLOTANTE .)
    NOT             reduce using rule 76 (valor -> FLOTANTE .)
    PUTS            reduce using rule 76 (valor -> FLOTANTE .)
    VARIABLE_LOCAL  reduce using rule 76 (valor -> FLOTANTE .)
    DEF             reduce using rule 76 (valor -> FLOTANTE .)
    VARIABLE_GLOBAL reduce using rule 76 (valor -> FLOTANTE .)
    VARIABLE_INSTANCIA reduce using rule 76 (valor -> FLOTANTE .)
    VARIABLE_CLASE  reduce using rule 76 (valor -> FLOTANTE .)
    IF              reduce using rule 76 (valor -> FLOTANTE .)
    CORCHETE_IZQ    reduce using rule 76 (valor -> FLOTANTE .)
    $end            reduce using rule 76 (valor -> FLOTANTE .)
    PUNTO_Y_COMA    reduce using rule 76 (valor -> FLOTANTE .)
    END_BLOCK       reduce using rule 76 (valor -> FLOTANTE .)
    ELSE            reduce using rule 76 (valor -> FLOTANTE .)
    ELSIF           reduce using rule 76 (valor -> FLOTANTE .)
    PARENTESIS_DER  reduce using rule 76 (valor -> FLOTANTE .)


state 34

    (77) valor -> CADENA .

    MAS             reduce using rule 77 (valor -> CADENA .)
    MENOS           reduce using rule 77 (valor -> CADENA .)
    MULTIPLICAR     reduce using rule 77 (valor -> CADENA .)
    DIVIDIR         reduce using rule 77 (valor -> CADENA .)
    MODULO          reduce using rule 77 (valor -> CADENA .)
    EXPONENCIACION  reduce using rule 77 (valor -> CADENA .)
    COMA            reduce using rule 77 (valor -> CADENA .)
    CORCHETE_DER    reduce using rule 77 (valor -> CADENA .)
    MAYOR_QUE       reduce using rule 77 (valor -> CADENA .)
    MENOR_QUE       reduce using rule 77 (valor -> CADENA .)
    IGUAL_IGUAL     reduce using rule 77 (valor -> CADENA .)
    DIFERENTE       reduce using rule 77 (valor -> CADENA .)
    MAYOR_IGUAL     reduce using rule 77 (valor -> CADENA .)
    MENOR_IGUAL     reduce using rule 77 (valor -> CADENA .)
    THEN            reduce using rule 77 (valor -> CADENA .)
    AND             reduce using rule 77 (valor -> CADENA .)
    OR              reduce using rule 77 (valor -> CADENA .)
    NOT             reduce using rule 77 (valor -> CADENA .)
    PUTS            reduce using rule 77 (valor -> CADENA .)
    VARIABLE_LOCAL  reduce using rule 77 (valor -> CADENA .)
    DEF             reduce using rule 77 (valor -> CADENA .)
    VARIABLE_GLOBAL reduce using rule 77 (valor -> CADENA .)
    VARIABLE_INSTANCIA reduce using rule 77 (valor -> CADENA .)
    VARIABLE_CLASE  reduce using rule 77 (valor -> CADENA .)
    IF              reduce using rule 77 (valor -> CADENA .)
    CORCHETE_IZQ    reduce using rule 77 (valor -> CADENA .)
    $end            reduce using rule 77 (valor -> CADENA .)
    PUNTO_Y_COMA    reduce using rule 77 (valor -> CADENA .)
    END_BLOCK       reduce using rule 77 (valor -> CADENA .)
    ELSE            reduce using rule 77 (valor -> CADENA .)
    ELSIF           reduce using rule 77 (valor -> CADENA .)
    PARENTESIS_DER  reduce using rule 77 (valor -> CADENA .)


state 35

    (78) valor -> variable .

    MAS             reduce using rule 78 (valor -> variable .)
    MENOS           reduce using rule 78 (valor -> variable .)
    MULTIPLICAR     reduce using rule 78 (valor -> variable .)
    DIVIDIR         reduce using rule 78 (valor -> variable .)
    MODULO          reduce using rule 78 (valor -> variable .)
    EXPONENCIACION  reduce using rule 78 (valor -> variable .)
    COMA            reduce using rule 78 (valor -> variable .)
    CORCHETE_DER    reduce using rule 78 (valor -> variable .)
    MAYOR_QUE       reduce using rule 78 (valor -> variable .)
    MENOR_QUE       reduce using rule 78 (valor -> variable .)
    IGUAL_IGUAL     reduce using rule 78 (valor -> variable .)
    DIFERENTE       reduce using rule 78 (valor -> variable .)
    MAYOR_IGUAL     reduce using rule 78 (valor -> variable .)
    MENOR_IGUAL     reduce using rule 78 (valor -> variable .)
    THEN            reduce using rule 78 (valor -> variable .)
    AND             reduce using rule 78 (valor -> variable .)
    OR              reduce using rule 78 (valor -> variable .)
    NOT             reduce using rule 78 (valor -> variable .)
    PUTS            reduce using rule 78 (valor -> variable .)
    VARIABLE_LOCAL  reduce using rule 78 (valor -> variable .)
    DEF             reduce using rule 78 (valor -> variable .)
    VARIABLE_GLOBAL reduce using rule 78 (valor -> variable .)
    VARIABLE_INSTANCIA reduce using rule 78 (valor -> variable .)
    VARIABLE_CLASE  reduce using rule 78 (valor -> variable .)
    IF              reduce using rule 78 (valor -> variable .)
    CORCHETE_IZQ    reduce using rule 78 (valor -> variable .)
    $end            reduce using rule 78 (valor -> variable .)
    PUNTO_Y_COMA    reduce using rule 78 (valor -> variable .)
    END_BLOCK       reduce using rule 78 (valor -> variable .)
    ELSE            reduce using rule 78 (valor -> variable .)
    ELSIF           reduce using rule 78 (valor -> variable .)
    PARENTESIS_DER  reduce using rule 78 (valor -> variable .)


state 36

    (26) funcion -> DEF VARIABLE_LOCAL . PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK

    PARENTESIS_IZQ  shift and go to state 58


state 37

    (14) if -> IF expresion . instrucciones END_BLOCK
    (15) if -> IF expresion . THEN instrucciones END_BLOCK
    (16) if_else -> IF expresion . instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> IF expresion . THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> IF expresion . instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> IF expresion . THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> IF expresion . instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> IF expresion . THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    THEN            shift and go to state 60
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 59
    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 38

    (31) expresion -> var_expresion .
    (32) expresion -> var_expresion . comparadores var_expresion
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    THEN            reduce using rule 31 (expresion -> var_expresion .)
    AND             reduce using rule 31 (expresion -> var_expresion .)
    OR              reduce using rule 31 (expresion -> var_expresion .)
    NOT             reduce using rule 31 (expresion -> var_expresion .)
    PUTS            reduce using rule 31 (expresion -> var_expresion .)
    VARIABLE_LOCAL  reduce using rule 31 (expresion -> var_expresion .)
    DEF             reduce using rule 31 (expresion -> var_expresion .)
    VARIABLE_GLOBAL reduce using rule 31 (expresion -> var_expresion .)
    VARIABLE_INSTANCIA reduce using rule 31 (expresion -> var_expresion .)
    VARIABLE_CLASE  reduce using rule 31 (expresion -> var_expresion .)
    IF              reduce using rule 31 (expresion -> var_expresion .)
    PARENTESIS_DER  reduce using rule 31 (expresion -> var_expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69

  ! MAYOR_QUE       [ reduce using rule 31 (expresion -> var_expresion .) ]
  ! MENOR_QUE       [ reduce using rule 31 (expresion -> var_expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 31 (expresion -> var_expresion .) ]
  ! DIFERENTE       [ reduce using rule 31 (expresion -> var_expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 31 (expresion -> var_expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 31 (expresion -> var_expresion .) ]

    comparadores                   shift and go to state 79

state 39

    (34) expresion -> PARENTESIS_IZQ . expresion PARENTESIS_DER
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 80
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 40

    (35) expresion -> NOT_BLOCK . expresion
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 81
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 41

    (46) var_expresion -> valor .

    MAYOR_QUE       reduce using rule 46 (var_expresion -> valor .)
    MENOR_QUE       reduce using rule 46 (var_expresion -> valor .)
    IGUAL_IGUAL     reduce using rule 46 (var_expresion -> valor .)
    DIFERENTE       reduce using rule 46 (var_expresion -> valor .)
    MAYOR_IGUAL     reduce using rule 46 (var_expresion -> valor .)
    MENOR_IGUAL     reduce using rule 46 (var_expresion -> valor .)
    THEN            reduce using rule 46 (var_expresion -> valor .)
    AND             reduce using rule 46 (var_expresion -> valor .)
    OR              reduce using rule 46 (var_expresion -> valor .)
    NOT             reduce using rule 46 (var_expresion -> valor .)
    PUTS            reduce using rule 46 (var_expresion -> valor .)
    VARIABLE_LOCAL  reduce using rule 46 (var_expresion -> valor .)
    DEF             reduce using rule 46 (var_expresion -> valor .)
    VARIABLE_GLOBAL reduce using rule 46 (var_expresion -> valor .)
    VARIABLE_INSTANCIA reduce using rule 46 (var_expresion -> valor .)
    VARIABLE_CLASE  reduce using rule 46 (var_expresion -> valor .)
    IF              reduce using rule 46 (var_expresion -> valor .)
    PARENTESIS_DER  reduce using rule 46 (var_expresion -> valor .)


state 42

    (47) var_expresion -> booleano .

    MAYOR_QUE       reduce using rule 47 (var_expresion -> booleano .)
    MENOR_QUE       reduce using rule 47 (var_expresion -> booleano .)
    IGUAL_IGUAL     reduce using rule 47 (var_expresion -> booleano .)
    DIFERENTE       reduce using rule 47 (var_expresion -> booleano .)
    MAYOR_IGUAL     reduce using rule 47 (var_expresion -> booleano .)
    MENOR_IGUAL     reduce using rule 47 (var_expresion -> booleano .)
    THEN            reduce using rule 47 (var_expresion -> booleano .)
    AND             reduce using rule 47 (var_expresion -> booleano .)
    OR              reduce using rule 47 (var_expresion -> booleano .)
    NOT             reduce using rule 47 (var_expresion -> booleano .)
    PUTS            reduce using rule 47 (var_expresion -> booleano .)
    VARIABLE_LOCAL  reduce using rule 47 (var_expresion -> booleano .)
    DEF             reduce using rule 47 (var_expresion -> booleano .)
    VARIABLE_GLOBAL reduce using rule 47 (var_expresion -> booleano .)
    VARIABLE_INSTANCIA reduce using rule 47 (var_expresion -> booleano .)
    VARIABLE_CLASE  reduce using rule 47 (var_expresion -> booleano .)
    IF              reduce using rule 47 (var_expresion -> booleano .)
    PARENTESIS_DER  reduce using rule 47 (var_expresion -> booleano .)


state 43

    (8) asignacion -> variable ASIGNACION valores .

    PUTS            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    CORCHETE_IZQ    reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    DEF             reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_LOCAL  reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_GLOBAL reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_INSTANCIA reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    VARIABLE_CLASE  reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    IF              reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    $end            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    PUNTO_Y_COMA    reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    END_BLOCK       reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    ELSE            reduce using rule 8 (asignacion -> variable ASIGNACION valores .)
    ELSIF           reduce using rule 8 (asignacion -> variable ASIGNACION valores .)


state 44

    (71) valores -> operacionAritmetica .

    PUTS            reduce using rule 71 (valores -> operacionAritmetica .)
    CORCHETE_IZQ    reduce using rule 71 (valores -> operacionAritmetica .)
    DEF             reduce using rule 71 (valores -> operacionAritmetica .)
    VARIABLE_LOCAL  reduce using rule 71 (valores -> operacionAritmetica .)
    VARIABLE_GLOBAL reduce using rule 71 (valores -> operacionAritmetica .)
    VARIABLE_INSTANCIA reduce using rule 71 (valores -> operacionAritmetica .)
    VARIABLE_CLASE  reduce using rule 71 (valores -> operacionAritmetica .)
    IF              reduce using rule 71 (valores -> operacionAritmetica .)
    $end            reduce using rule 71 (valores -> operacionAritmetica .)
    PUNTO_Y_COMA    reduce using rule 71 (valores -> operacionAritmetica .)
    END_BLOCK       reduce using rule 71 (valores -> operacionAritmetica .)
    ELSE            reduce using rule 71 (valores -> operacionAritmetica .)
    ELSIF           reduce using rule 71 (valores -> operacionAritmetica .)


state 45

    (72) valores -> SIMBOLO .

    PUTS            reduce using rule 72 (valores -> SIMBOLO .)
    CORCHETE_IZQ    reduce using rule 72 (valores -> SIMBOLO .)
    DEF             reduce using rule 72 (valores -> SIMBOLO .)
    VARIABLE_LOCAL  reduce using rule 72 (valores -> SIMBOLO .)
    VARIABLE_GLOBAL reduce using rule 72 (valores -> SIMBOLO .)
    VARIABLE_INSTANCIA reduce using rule 72 (valores -> SIMBOLO .)
    VARIABLE_CLASE  reduce using rule 72 (valores -> SIMBOLO .)
    IF              reduce using rule 72 (valores -> SIMBOLO .)
    $end            reduce using rule 72 (valores -> SIMBOLO .)
    PUNTO_Y_COMA    reduce using rule 72 (valores -> SIMBOLO .)
    END_BLOCK       reduce using rule 72 (valores -> SIMBOLO .)
    ELSE            reduce using rule 72 (valores -> SIMBOLO .)
    ELSIF           reduce using rule 72 (valores -> SIMBOLO .)


state 46

    (73) valores -> booleano .

    PUTS            reduce using rule 73 (valores -> booleano .)
    CORCHETE_IZQ    reduce using rule 73 (valores -> booleano .)
    DEF             reduce using rule 73 (valores -> booleano .)
    VARIABLE_LOCAL  reduce using rule 73 (valores -> booleano .)
    VARIABLE_GLOBAL reduce using rule 73 (valores -> booleano .)
    VARIABLE_INSTANCIA reduce using rule 73 (valores -> booleano .)
    VARIABLE_CLASE  reduce using rule 73 (valores -> booleano .)
    IF              reduce using rule 73 (valores -> booleano .)
    $end            reduce using rule 73 (valores -> booleano .)
    PUNTO_Y_COMA    reduce using rule 73 (valores -> booleano .)
    END_BLOCK       reduce using rule 73 (valores -> booleano .)
    ELSE            reduce using rule 73 (valores -> booleano .)
    ELSIF           reduce using rule 73 (valores -> booleano .)


state 47

    (74) valores -> array .

    PUTS            reduce using rule 74 (valores -> array .)
    CORCHETE_IZQ    reduce using rule 74 (valores -> array .)
    DEF             reduce using rule 74 (valores -> array .)
    VARIABLE_LOCAL  reduce using rule 74 (valores -> array .)
    VARIABLE_GLOBAL reduce using rule 74 (valores -> array .)
    VARIABLE_INSTANCIA reduce using rule 74 (valores -> array .)
    VARIABLE_CLASE  reduce using rule 74 (valores -> array .)
    IF              reduce using rule 74 (valores -> array .)
    $end            reduce using rule 74 (valores -> array .)
    PUNTO_Y_COMA    reduce using rule 74 (valores -> array .)
    END_BLOCK       reduce using rule 74 (valores -> array .)
    ELSE            reduce using rule 74 (valores -> array .)
    ELSIF           reduce using rule 74 (valores -> array .)


state 48

    (9) impresion -> PUTS PARENTESIS_IZQ argumentos . PARENTESIS_DER

    PARENTESIS_DER  shift and go to state 82


state 49

    (10) array -> CORCHETE_IZQ argumentos CORCHETE_DER .

    PUTS            reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    CORCHETE_IZQ    reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    DEF             reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_LOCAL  reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_GLOBAL reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_INSTANCIA reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    VARIABLE_CLASE  reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    IF              reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    $end            reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    COMA            reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    CORCHETE_DER    reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    PUNTO_Y_COMA    reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    END_BLOCK       reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    ELSE            reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    ELSIF           reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)
    PARENTESIS_DER  reduce using rule 10 (array -> CORCHETE_IZQ argumentos CORCHETE_DER .)


state 50

    (65) argumentos -> argumento COMA . argumentos
    (64) argumentos -> . argumento
    (65) argumentos -> . argumento COMA argumentos
    (66) argumento -> . booleano
    (67) argumento -> . operacionAritmetica
    (68) argumento -> . array
    (69) argumento -> . empty
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (70) empty -> .
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 70 (empty -> .)
    CORCHETE_DER    reduce using rule 70 (empty -> .)
    PARENTESIS_DER  reduce using rule 70 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    argumento                      shift and go to state 24
    argumentos                     shift and go to state 83
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 51

    (80) operacionAritmetica -> valor operador . operacionAritmetica
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    valor                          shift and go to state 31
    operacionAritmetica            shift and go to state 84
    variable                       shift and go to state 35

state 52

    (81) operador -> MAS .

    NUMERO          reduce using rule 81 (operador -> MAS .)
    FLOTANTE        reduce using rule 81 (operador -> MAS .)
    CADENA          reduce using rule 81 (operador -> MAS .)
    VARIABLE_LOCAL  reduce using rule 81 (operador -> MAS .)
    VARIABLE_GLOBAL reduce using rule 81 (operador -> MAS .)
    VARIABLE_INSTANCIA reduce using rule 81 (operador -> MAS .)
    VARIABLE_CLASE  reduce using rule 81 (operador -> MAS .)


state 53

    (82) operador -> MENOS .

    NUMERO          reduce using rule 82 (operador -> MENOS .)
    FLOTANTE        reduce using rule 82 (operador -> MENOS .)
    CADENA          reduce using rule 82 (operador -> MENOS .)
    VARIABLE_LOCAL  reduce using rule 82 (operador -> MENOS .)
    VARIABLE_GLOBAL reduce using rule 82 (operador -> MENOS .)
    VARIABLE_INSTANCIA reduce using rule 82 (operador -> MENOS .)
    VARIABLE_CLASE  reduce using rule 82 (operador -> MENOS .)


state 54

    (83) operador -> MULTIPLICAR .

    NUMERO          reduce using rule 83 (operador -> MULTIPLICAR .)
    FLOTANTE        reduce using rule 83 (operador -> MULTIPLICAR .)
    CADENA          reduce using rule 83 (operador -> MULTIPLICAR .)
    VARIABLE_LOCAL  reduce using rule 83 (operador -> MULTIPLICAR .)
    VARIABLE_GLOBAL reduce using rule 83 (operador -> MULTIPLICAR .)
    VARIABLE_INSTANCIA reduce using rule 83 (operador -> MULTIPLICAR .)
    VARIABLE_CLASE  reduce using rule 83 (operador -> MULTIPLICAR .)


state 55

    (84) operador -> DIVIDIR .

    NUMERO          reduce using rule 84 (operador -> DIVIDIR .)
    FLOTANTE        reduce using rule 84 (operador -> DIVIDIR .)
    CADENA          reduce using rule 84 (operador -> DIVIDIR .)
    VARIABLE_LOCAL  reduce using rule 84 (operador -> DIVIDIR .)
    VARIABLE_GLOBAL reduce using rule 84 (operador -> DIVIDIR .)
    VARIABLE_INSTANCIA reduce using rule 84 (operador -> DIVIDIR .)
    VARIABLE_CLASE  reduce using rule 84 (operador -> DIVIDIR .)


state 56

    (85) operador -> MODULO .

    NUMERO          reduce using rule 85 (operador -> MODULO .)
    FLOTANTE        reduce using rule 85 (operador -> MODULO .)
    CADENA          reduce using rule 85 (operador -> MODULO .)
    VARIABLE_LOCAL  reduce using rule 85 (operador -> MODULO .)
    VARIABLE_GLOBAL reduce using rule 85 (operador -> MODULO .)
    VARIABLE_INSTANCIA reduce using rule 85 (operador -> MODULO .)
    VARIABLE_CLASE  reduce using rule 85 (operador -> MODULO .)


state 57

    (86) operador -> EXPONENCIACION .

    NUMERO          reduce using rule 86 (operador -> EXPONENCIACION .)
    FLOTANTE        reduce using rule 86 (operador -> EXPONENCIACION .)
    CADENA          reduce using rule 86 (operador -> EXPONENCIACION .)
    VARIABLE_LOCAL  reduce using rule 86 (operador -> EXPONENCIACION .)
    VARIABLE_GLOBAL reduce using rule 86 (operador -> EXPONENCIACION .)
    VARIABLE_INSTANCIA reduce using rule 86 (operador -> EXPONENCIACION .)
    VARIABLE_CLASE  reduce using rule 86 (operador -> EXPONENCIACION .)


state 58

    (26) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ . parametros PARENTESIS_DER instrucciones END_BLOCK
    (27) parametros -> . parametro
    (28) parametros -> . parametro COMA parametros
    (29) parametro -> . VARIABLE_LOCAL
    (30) parametro -> . empty
    (70) empty -> .

    VARIABLE_LOCAL  shift and go to state 85
    COMA            reduce using rule 70 (empty -> .)
    PARENTESIS_DER  reduce using rule 70 (empty -> .)

    parametros                     shift and go to state 86
    parametro                      shift and go to state 87
    empty                          shift and go to state 88

state 59

    (14) if -> IF expresion instrucciones . END_BLOCK
    (16) if_else -> IF expresion instrucciones . ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> IF expresion instrucciones . elsif_clauses END_BLOCK
    (20) if_elsif_else -> IF expresion instrucciones . elsif_clauses ELSE instrucciones END_BLOCK
    (22) elsif_clauses -> . ELSIF expresion instrucciones
    (23) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (24) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       shift and go to state 89
    ELSE            shift and go to state 90
    ELSIF           shift and go to state 92

    elsif_clauses                  shift and go to state 91

state 60

    (15) if -> IF expresion THEN . instrucciones END_BLOCK
    (17) if_else -> IF expresion THEN . instrucciones ELSE instrucciones END_BLOCK
    (19) if_elsif_else -> IF expresion THEN . instrucciones elsif_clauses END_BLOCK
    (21) if_elsif_else -> IF expresion THEN . instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 93
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 61

    (33) expresion -> expresion comparadores . expresion
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 94
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 62

    (36) expresion -> expresion operador_logico . expresion
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 95
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 63

    (48) instrucciones -> instruccion .
    (49) instrucciones -> instruccion . instrucciones
    (50) instrucciones -> instruccion . PUNTO_Y_COMA instrucciones
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    END_BLOCK       reduce using rule 48 (instrucciones -> instruccion .)
    ELSE            reduce using rule 48 (instrucciones -> instruccion .)
    ELSIF           reduce using rule 48 (instrucciones -> instruccion .)
    PUNTO_Y_COMA    shift and go to state 97
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instruccion                    shift and go to state 63
    instrucciones                  shift and go to state 96
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 64

    (37) comparadores -> MAYOR_QUE .

    PARENTESIS_IZQ  reduce using rule 37 (comparadores -> MAYOR_QUE .)
    NOT_BLOCK       reduce using rule 37 (comparadores -> MAYOR_QUE .)
    NUMERO          reduce using rule 37 (comparadores -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 37 (comparadores -> MAYOR_QUE .)
    CADENA          reduce using rule 37 (comparadores -> MAYOR_QUE .)
    FALSE           reduce using rule 37 (comparadores -> MAYOR_QUE .)
    TRUE            reduce using rule 37 (comparadores -> MAYOR_QUE .)
    VARIABLE_LOCAL  reduce using rule 37 (comparadores -> MAYOR_QUE .)
    VARIABLE_GLOBAL reduce using rule 37 (comparadores -> MAYOR_QUE .)
    VARIABLE_INSTANCIA reduce using rule 37 (comparadores -> MAYOR_QUE .)
    VARIABLE_CLASE  reduce using rule 37 (comparadores -> MAYOR_QUE .)


state 65

    (38) comparadores -> MENOR_QUE .

    PARENTESIS_IZQ  reduce using rule 38 (comparadores -> MENOR_QUE .)
    NOT_BLOCK       reduce using rule 38 (comparadores -> MENOR_QUE .)
    NUMERO          reduce using rule 38 (comparadores -> MENOR_QUE .)
    FLOTANTE        reduce using rule 38 (comparadores -> MENOR_QUE .)
    CADENA          reduce using rule 38 (comparadores -> MENOR_QUE .)
    FALSE           reduce using rule 38 (comparadores -> MENOR_QUE .)
    TRUE            reduce using rule 38 (comparadores -> MENOR_QUE .)
    VARIABLE_LOCAL  reduce using rule 38 (comparadores -> MENOR_QUE .)
    VARIABLE_GLOBAL reduce using rule 38 (comparadores -> MENOR_QUE .)
    VARIABLE_INSTANCIA reduce using rule 38 (comparadores -> MENOR_QUE .)
    VARIABLE_CLASE  reduce using rule 38 (comparadores -> MENOR_QUE .)


state 66

    (39) comparadores -> IGUAL_IGUAL .

    PARENTESIS_IZQ  reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    NOT_BLOCK       reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    NUMERO          reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    FLOTANTE        reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    CADENA          reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    FALSE           reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    TRUE            reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 39 (comparadores -> IGUAL_IGUAL .)
    VARIABLE_CLASE  reduce using rule 39 (comparadores -> IGUAL_IGUAL .)


state 67

    (40) comparadores -> DIFERENTE .

    PARENTESIS_IZQ  reduce using rule 40 (comparadores -> DIFERENTE .)
    NOT_BLOCK       reduce using rule 40 (comparadores -> DIFERENTE .)
    NUMERO          reduce using rule 40 (comparadores -> DIFERENTE .)
    FLOTANTE        reduce using rule 40 (comparadores -> DIFERENTE .)
    CADENA          reduce using rule 40 (comparadores -> DIFERENTE .)
    FALSE           reduce using rule 40 (comparadores -> DIFERENTE .)
    TRUE            reduce using rule 40 (comparadores -> DIFERENTE .)
    VARIABLE_LOCAL  reduce using rule 40 (comparadores -> DIFERENTE .)
    VARIABLE_GLOBAL reduce using rule 40 (comparadores -> DIFERENTE .)
    VARIABLE_INSTANCIA reduce using rule 40 (comparadores -> DIFERENTE .)
    VARIABLE_CLASE  reduce using rule 40 (comparadores -> DIFERENTE .)


state 68

    (41) comparadores -> MAYOR_IGUAL .

    PARENTESIS_IZQ  reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    NOT_BLOCK       reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    NUMERO          reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    CADENA          reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    FALSE           reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    TRUE            reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 41 (comparadores -> MAYOR_IGUAL .)
    VARIABLE_CLASE  reduce using rule 41 (comparadores -> MAYOR_IGUAL .)


state 69

    (42) comparadores -> MENOR_IGUAL .

    PARENTESIS_IZQ  reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    NOT_BLOCK       reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    NUMERO          reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    CADENA          reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    FALSE           reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    TRUE            reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    VARIABLE_INSTANCIA reduce using rule 42 (comparadores -> MENOR_IGUAL .)
    VARIABLE_CLASE  reduce using rule 42 (comparadores -> MENOR_IGUAL .)


state 70

    (43) operador_logico -> AND .

    PARENTESIS_IZQ  reduce using rule 43 (operador_logico -> AND .)
    NOT_BLOCK       reduce using rule 43 (operador_logico -> AND .)
    NUMERO          reduce using rule 43 (operador_logico -> AND .)
    FLOTANTE        reduce using rule 43 (operador_logico -> AND .)
    CADENA          reduce using rule 43 (operador_logico -> AND .)
    FALSE           reduce using rule 43 (operador_logico -> AND .)
    TRUE            reduce using rule 43 (operador_logico -> AND .)
    VARIABLE_LOCAL  reduce using rule 43 (operador_logico -> AND .)
    VARIABLE_GLOBAL reduce using rule 43 (operador_logico -> AND .)
    VARIABLE_INSTANCIA reduce using rule 43 (operador_logico -> AND .)
    VARIABLE_CLASE  reduce using rule 43 (operador_logico -> AND .)


state 71

    (44) operador_logico -> OR .

    PARENTESIS_IZQ  reduce using rule 44 (operador_logico -> OR .)
    NOT_BLOCK       reduce using rule 44 (operador_logico -> OR .)
    NUMERO          reduce using rule 44 (operador_logico -> OR .)
    FLOTANTE        reduce using rule 44 (operador_logico -> OR .)
    CADENA          reduce using rule 44 (operador_logico -> OR .)
    FALSE           reduce using rule 44 (operador_logico -> OR .)
    TRUE            reduce using rule 44 (operador_logico -> OR .)
    VARIABLE_LOCAL  reduce using rule 44 (operador_logico -> OR .)
    VARIABLE_GLOBAL reduce using rule 44 (operador_logico -> OR .)
    VARIABLE_INSTANCIA reduce using rule 44 (operador_logico -> OR .)
    VARIABLE_CLASE  reduce using rule 44 (operador_logico -> OR .)


state 72

    (45) operador_logico -> NOT .

    PARENTESIS_IZQ  reduce using rule 45 (operador_logico -> NOT .)
    NOT_BLOCK       reduce using rule 45 (operador_logico -> NOT .)
    NUMERO          reduce using rule 45 (operador_logico -> NOT .)
    FLOTANTE        reduce using rule 45 (operador_logico -> NOT .)
    CADENA          reduce using rule 45 (operador_logico -> NOT .)
    FALSE           reduce using rule 45 (operador_logico -> NOT .)
    TRUE            reduce using rule 45 (operador_logico -> NOT .)
    VARIABLE_LOCAL  reduce using rule 45 (operador_logico -> NOT .)
    VARIABLE_GLOBAL reduce using rule 45 (operador_logico -> NOT .)
    VARIABLE_INSTANCIA reduce using rule 45 (operador_logico -> NOT .)
    VARIABLE_CLASE  reduce using rule 45 (operador_logico -> NOT .)


state 73

    (51) instruccion -> asignacion .

    PUNTO_Y_COMA    reduce using rule 51 (instruccion -> asignacion .)
    PUTS            reduce using rule 51 (instruccion -> asignacion .)
    VARIABLE_LOCAL  reduce using rule 51 (instruccion -> asignacion .)
    DEF             reduce using rule 51 (instruccion -> asignacion .)
    VARIABLE_GLOBAL reduce using rule 51 (instruccion -> asignacion .)
    VARIABLE_INSTANCIA reduce using rule 51 (instruccion -> asignacion .)
    VARIABLE_CLASE  reduce using rule 51 (instruccion -> asignacion .)
    IF              reduce using rule 51 (instruccion -> asignacion .)
    END_BLOCK       reduce using rule 51 (instruccion -> asignacion .)
    ELSE            reduce using rule 51 (instruccion -> asignacion .)
    ELSIF           reduce using rule 51 (instruccion -> asignacion .)


state 74

    (52) instruccion -> impresion .

    PUNTO_Y_COMA    reduce using rule 52 (instruccion -> impresion .)
    PUTS            reduce using rule 52 (instruccion -> impresion .)
    VARIABLE_LOCAL  reduce using rule 52 (instruccion -> impresion .)
    DEF             reduce using rule 52 (instruccion -> impresion .)
    VARIABLE_GLOBAL reduce using rule 52 (instruccion -> impresion .)
    VARIABLE_INSTANCIA reduce using rule 52 (instruccion -> impresion .)
    VARIABLE_CLASE  reduce using rule 52 (instruccion -> impresion .)
    IF              reduce using rule 52 (instruccion -> impresion .)
    END_BLOCK       reduce using rule 52 (instruccion -> impresion .)
    ELSE            reduce using rule 52 (instruccion -> impresion .)
    ELSIF           reduce using rule 52 (instruccion -> impresion .)


state 75

    (53) instruccion -> condicion .

    PUNTO_Y_COMA    reduce using rule 53 (instruccion -> condicion .)
    PUTS            reduce using rule 53 (instruccion -> condicion .)
    VARIABLE_LOCAL  reduce using rule 53 (instruccion -> condicion .)
    DEF             reduce using rule 53 (instruccion -> condicion .)
    VARIABLE_GLOBAL reduce using rule 53 (instruccion -> condicion .)
    VARIABLE_INSTANCIA reduce using rule 53 (instruccion -> condicion .)
    VARIABLE_CLASE  reduce using rule 53 (instruccion -> condicion .)
    IF              reduce using rule 53 (instruccion -> condicion .)
    END_BLOCK       reduce using rule 53 (instruccion -> condicion .)
    ELSE            reduce using rule 53 (instruccion -> condicion .)
    ELSIF           reduce using rule 53 (instruccion -> condicion .)


state 76

    (54) instruccion -> llamada_funcion .

    PUNTO_Y_COMA    reduce using rule 54 (instruccion -> llamada_funcion .)
    PUTS            reduce using rule 54 (instruccion -> llamada_funcion .)
    VARIABLE_LOCAL  reduce using rule 54 (instruccion -> llamada_funcion .)
    DEF             reduce using rule 54 (instruccion -> llamada_funcion .)
    VARIABLE_GLOBAL reduce using rule 54 (instruccion -> llamada_funcion .)
    VARIABLE_INSTANCIA reduce using rule 54 (instruccion -> llamada_funcion .)
    VARIABLE_CLASE  reduce using rule 54 (instruccion -> llamada_funcion .)
    IF              reduce using rule 54 (instruccion -> llamada_funcion .)
    END_BLOCK       reduce using rule 54 (instruccion -> llamada_funcion .)
    ELSE            reduce using rule 54 (instruccion -> llamada_funcion .)
    ELSIF           reduce using rule 54 (instruccion -> llamada_funcion .)


state 77

    (55) instruccion -> funcion .

    PUNTO_Y_COMA    reduce using rule 55 (instruccion -> funcion .)
    PUTS            reduce using rule 55 (instruccion -> funcion .)
    VARIABLE_LOCAL  reduce using rule 55 (instruccion -> funcion .)
    DEF             reduce using rule 55 (instruccion -> funcion .)
    VARIABLE_GLOBAL reduce using rule 55 (instruccion -> funcion .)
    VARIABLE_INSTANCIA reduce using rule 55 (instruccion -> funcion .)
    VARIABLE_CLASE  reduce using rule 55 (instruccion -> funcion .)
    IF              reduce using rule 55 (instruccion -> funcion .)
    END_BLOCK       reduce using rule 55 (instruccion -> funcion .)
    ELSE            reduce using rule 55 (instruccion -> funcion .)
    ELSIF           reduce using rule 55 (instruccion -> funcion .)


state 78

    (56) llamada_funcion -> VARIABLE_LOCAL . PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> VARIABLE_LOCAL . PARENTESIS_IZQ PARENTESIS_DER
    (58) variable -> VARIABLE_LOCAL .

    PARENTESIS_IZQ  shift and go to state 98
    ASIGNACION      reduce using rule 58 (variable -> VARIABLE_LOCAL .)


state 79

    (32) expresion -> var_expresion comparadores . var_expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    var_expresion                  shift and go to state 99
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 80

    (34) expresion -> PARENTESIS_IZQ expresion . PARENTESIS_DER
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT

    PARENTESIS_DER  shift and go to state 100
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 81

    (35) expresion -> NOT_BLOCK expresion .
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    PUTS            reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_LOCAL  reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    DEF             reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_GLOBAL reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_INSTANCIA reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    VARIABLE_CLASE  reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    IF              reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    PARENTESIS_DER  reduce using rule 35 (expresion -> NOT_BLOCK expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! MENOR_QUE       [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! DIFERENTE       [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! AND             [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! OR              [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]
  ! NOT             [ reduce using rule 35 (expresion -> NOT_BLOCK expresion .) ]

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 82

    (9) impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .

    PUTS            reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    CORCHETE_IZQ    reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    DEF             reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    IF              reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    $end            reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    PUNTO_Y_COMA    reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    END_BLOCK       reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSE            reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSIF           reduce using rule 9 (impresion -> PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER .)


state 83

    (65) argumentos -> argumento COMA argumentos .

    CORCHETE_DER    reduce using rule 65 (argumentos -> argumento COMA argumentos .)
    PARENTESIS_DER  reduce using rule 65 (argumentos -> argumento COMA argumentos .)


state 84

    (80) operacionAritmetica -> valor operador operacionAritmetica .

    COMA            reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    CORCHETE_DER    reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    PUTS            reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    CORCHETE_IZQ    reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    DEF             reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_LOCAL  reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_GLOBAL reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_INSTANCIA reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    VARIABLE_CLASE  reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    IF              reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    $end            reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    PUNTO_Y_COMA    reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    END_BLOCK       reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    ELSE            reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    ELSIF           reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)
    PARENTESIS_DER  reduce using rule 80 (operacionAritmetica -> valor operador operacionAritmetica .)


state 85

    (29) parametro -> VARIABLE_LOCAL .

    COMA            reduce using rule 29 (parametro -> VARIABLE_LOCAL .)
    PARENTESIS_DER  reduce using rule 29 (parametro -> VARIABLE_LOCAL .)


state 86

    (26) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros . PARENTESIS_DER instrucciones END_BLOCK

    PARENTESIS_DER  shift and go to state 101


state 87

    (27) parametros -> parametro .
    (28) parametros -> parametro . COMA parametros

    PARENTESIS_DER  reduce using rule 27 (parametros -> parametro .)
    COMA            shift and go to state 102


state 88

    (30) parametro -> empty .

    COMA            reduce using rule 30 (parametro -> empty .)
    PARENTESIS_DER  reduce using rule 30 (parametro -> empty .)


state 89

    (14) if -> IF expresion instrucciones END_BLOCK .

    PUTS            reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    DEF             reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    IF              reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    $end            reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    ELSE            reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)
    ELSIF           reduce using rule 14 (if -> IF expresion instrucciones END_BLOCK .)


state 90

    (16) if_else -> IF expresion instrucciones ELSE . instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 103
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 91

    (18) if_elsif_else -> IF expresion instrucciones elsif_clauses . END_BLOCK
    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses . ELSE instrucciones END_BLOCK

    END_BLOCK       shift and go to state 104
    ELSE            shift and go to state 105


state 92

    (22) elsif_clauses -> ELSIF . expresion instrucciones
    (23) elsif_clauses -> ELSIF . expresion THEN instrucciones
    (24) elsif_clauses -> ELSIF . expresion instrucciones elsif_clauses
    (25) elsif_clauses -> ELSIF . expresion THEN instrucciones elsif_clauses
    (31) expresion -> . var_expresion
    (32) expresion -> . var_expresion comparadores var_expresion
    (33) expresion -> . expresion comparadores expresion
    (34) expresion -> . PARENTESIS_IZQ expresion PARENTESIS_DER
    (35) expresion -> . NOT_BLOCK expresion
    (36) expresion -> . expresion operador_logico expresion
    (46) var_expresion -> . valor
    (47) var_expresion -> . booleano
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

    PARENTESIS_IZQ  shift and go to state 39
    NOT_BLOCK       shift and go to state 40
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

    expresion                      shift and go to state 106
    var_expresion                  shift and go to state 38
    valor                          shift and go to state 41
    booleano                       shift and go to state 42
    variable                       shift and go to state 35

state 93

    (15) if -> IF expresion THEN instrucciones . END_BLOCK
    (17) if_else -> IF expresion THEN instrucciones . ELSE instrucciones END_BLOCK
    (19) if_elsif_else -> IF expresion THEN instrucciones . elsif_clauses END_BLOCK
    (21) if_elsif_else -> IF expresion THEN instrucciones . elsif_clauses ELSE instrucciones END_BLOCK
    (22) elsif_clauses -> . ELSIF expresion instrucciones
    (23) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (24) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       shift and go to state 107
    ELSE            shift and go to state 108
    ELSIF           shift and go to state 92

    elsif_clauses                  shift and go to state 109

state 94

    (33) expresion -> expresion comparadores expresion .
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 33 (expresion -> expresion comparadores expresion .)
    PUTS            reduce using rule 33 (expresion -> expresion comparadores expresion .)
    VARIABLE_LOCAL  reduce using rule 33 (expresion -> expresion comparadores expresion .)
    DEF             reduce using rule 33 (expresion -> expresion comparadores expresion .)
    VARIABLE_GLOBAL reduce using rule 33 (expresion -> expresion comparadores expresion .)
    VARIABLE_INSTANCIA reduce using rule 33 (expresion -> expresion comparadores expresion .)
    VARIABLE_CLASE  reduce using rule 33 (expresion -> expresion comparadores expresion .)
    IF              reduce using rule 33 (expresion -> expresion comparadores expresion .)
    PARENTESIS_DER  reduce using rule 33 (expresion -> expresion comparadores expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! MENOR_QUE       [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! DIFERENTE       [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! AND             [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! OR              [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]
  ! NOT             [ reduce using rule 33 (expresion -> expresion comparadores expresion .) ]

    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62

state 95

    (36) expresion -> expresion operador_logico expresion .
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT

  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    PUTS            reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    VARIABLE_LOCAL  reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    DEF             reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    VARIABLE_GLOBAL reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    VARIABLE_INSTANCIA reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    VARIABLE_CLASE  reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    IF              reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    PARENTESIS_DER  reduce using rule 36 (expresion -> expresion operador_logico expresion .)
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72

  ! MAYOR_QUE       [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! MENOR_QUE       [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! IGUAL_IGUAL     [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! DIFERENTE       [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! MAYOR_IGUAL     [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! MENOR_IGUAL     [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! AND             [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! OR              [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]
  ! NOT             [ reduce using rule 36 (expresion -> expresion operador_logico expresion .) ]

    operador_logico                shift and go to state 62
    comparadores                   shift and go to state 61

state 96

    (49) instrucciones -> instruccion instrucciones .

    END_BLOCK       reduce using rule 49 (instrucciones -> instruccion instrucciones .)
    ELSE            reduce using rule 49 (instrucciones -> instruccion instrucciones .)
    ELSIF           reduce using rule 49 (instrucciones -> instruccion instrucciones .)


state 97

    (50) instrucciones -> instruccion PUNTO_Y_COMA . instrucciones
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instruccion                    shift and go to state 63
    instrucciones                  shift and go to state 110
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 98

    (56) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ . argumentos PARENTESIS_DER
    (57) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ . PARENTESIS_DER
    (64) argumentos -> . argumento
    (65) argumentos -> . argumento COMA argumentos
    (66) argumento -> . booleano
    (67) argumento -> . operacionAritmetica
    (68) argumento -> . array
    (69) argumento -> . empty
    (62) booleano -> . FALSE
    (63) booleano -> . TRUE
    (79) operacionAritmetica -> . valor
    (80) operacionAritmetica -> . valor operador operacionAritmetica
    (10) array -> . CORCHETE_IZQ argumentos CORCHETE_DER
    (70) empty -> .
    (75) valor -> . NUMERO
    (76) valor -> . FLOTANTE
    (77) valor -> . CADENA
    (78) valor -> . variable
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE

  ! shift/reduce conflict for PARENTESIS_DER resolved as shift
    PARENTESIS_DER  shift and go to state 112
    FALSE           shift and go to state 29
    TRUE            shift and go to state 30
    CORCHETE_IZQ    shift and go to state 10
    COMA            reduce using rule 70 (empty -> .)
    NUMERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CADENA          shift and go to state 34
    VARIABLE_LOCAL  shift and go to state 15
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18

  ! PARENTESIS_DER  [ reduce using rule 70 (empty -> .) ]

    argumentos                     shift and go to state 111
    argumento                      shift and go to state 24
    booleano                       shift and go to state 25
    operacionAritmetica            shift and go to state 26
    array                          shift and go to state 27
    empty                          shift and go to state 28
    valor                          shift and go to state 31
    variable                       shift and go to state 35

state 99

    (32) expresion -> var_expresion comparadores var_expresion .

    THEN            reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    MAYOR_QUE       reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    MENOR_QUE       reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    IGUAL_IGUAL     reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    DIFERENTE       reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    MAYOR_IGUAL     reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    MENOR_IGUAL     reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    AND             reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    OR              reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    NOT             reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    PUTS            reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_LOCAL  reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    DEF             reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_GLOBAL reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_INSTANCIA reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    VARIABLE_CLASE  reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    IF              reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)
    PARENTESIS_DER  reduce using rule 32 (expresion -> var_expresion comparadores var_expresion .)


state 100

    (34) expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .

    THEN            reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MAYOR_QUE       reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MENOR_QUE       reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    IGUAL_IGUAL     reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    DIFERENTE       reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MAYOR_IGUAL     reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    MENOR_IGUAL     reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    AND             reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    OR              reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    NOT             reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    PUTS            reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    DEF             reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    IF              reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)
    PARENTESIS_DER  reduce using rule 34 (expresion -> PARENTESIS_IZQ expresion PARENTESIS_DER .)


state 101

    (26) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER . instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 113
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 102

    (28) parametros -> parametro COMA . parametros
    (27) parametros -> . parametro
    (28) parametros -> . parametro COMA parametros
    (29) parametro -> . VARIABLE_LOCAL
    (30) parametro -> . empty
    (70) empty -> .

    VARIABLE_LOCAL  shift and go to state 85
    COMA            reduce using rule 70 (empty -> .)
    PARENTESIS_DER  reduce using rule 70 (empty -> .)

    parametro                      shift and go to state 87
    parametros                     shift and go to state 114
    empty                          shift and go to state 88

state 103

    (16) if_else -> IF expresion instrucciones ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 115


state 104

    (18) if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .

    PUTS            reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    DEF             reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    IF              reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    $end            reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    END_BLOCK       reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    ELSE            reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)
    ELSIF           reduce using rule 18 (if_elsif_else -> IF expresion instrucciones elsif_clauses END_BLOCK .)


state 105

    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE . instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 116
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 106

    (22) elsif_clauses -> ELSIF expresion . instrucciones
    (23) elsif_clauses -> ELSIF expresion . THEN instrucciones
    (24) elsif_clauses -> ELSIF expresion . instrucciones elsif_clauses
    (25) elsif_clauses -> ELSIF expresion . THEN instrucciones elsif_clauses
    (33) expresion -> expresion . comparadores expresion
    (36) expresion -> expresion . operador_logico expresion
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (37) comparadores -> . MAYOR_QUE
    (38) comparadores -> . MENOR_QUE
    (39) comparadores -> . IGUAL_IGUAL
    (40) comparadores -> . DIFERENTE
    (41) comparadores -> . MAYOR_IGUAL
    (42) comparadores -> . MENOR_IGUAL
    (43) operador_logico -> . AND
    (44) operador_logico -> . OR
    (45) operador_logico -> . NOT
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    THEN            shift and go to state 118
    MAYOR_QUE       shift and go to state 64
    MENOR_QUE       shift and go to state 65
    IGUAL_IGUAL     shift and go to state 66
    DIFERENTE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_IGUAL     shift and go to state 69
    AND             shift and go to state 70
    OR              shift and go to state 71
    NOT             shift and go to state 72
    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 117
    comparadores                   shift and go to state 61
    operador_logico                shift and go to state 62
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 107

    (15) if -> IF expresion THEN instrucciones END_BLOCK .

    PUTS            reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    DEF             reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    IF              reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    $end            reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    ELSE            reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)
    ELSIF           reduce using rule 15 (if -> IF expresion THEN instrucciones END_BLOCK .)


state 108

    (17) if_else -> IF expresion THEN instrucciones ELSE . instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 119
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 109

    (19) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses . END_BLOCK
    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses . ELSE instrucciones END_BLOCK

    END_BLOCK       shift and go to state 120
    ELSE            shift and go to state 121


state 110

    (50) instrucciones -> instruccion PUNTO_Y_COMA instrucciones .

    END_BLOCK       reduce using rule 50 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)
    ELSE            reduce using rule 50 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)
    ELSIF           reduce using rule 50 (instrucciones -> instruccion PUNTO_Y_COMA instrucciones .)


state 111

    (56) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos . PARENTESIS_DER

    PARENTESIS_DER  shift and go to state 122


state 112

    (57) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .

    PUNTO_Y_COMA    reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    PUTS            reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    DEF             reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    IF              reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    END_BLOCK       reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    ELSE            reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)
    ELSIF           reduce using rule 57 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER .)


state 113

    (26) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 123


state 114

    (28) parametros -> parametro COMA parametros .

    PARENTESIS_DER  reduce using rule 28 (parametros -> parametro COMA parametros .)


state 115

    (16) if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 16 (if_else -> IF expresion instrucciones ELSE instrucciones END_BLOCK .)


state 116

    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 124


state 117

    (22) elsif_clauses -> ELSIF expresion instrucciones .
    (24) elsif_clauses -> ELSIF expresion instrucciones . elsif_clauses
    (22) elsif_clauses -> . ELSIF expresion instrucciones
    (23) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (24) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       reduce using rule 22 (elsif_clauses -> ELSIF expresion instrucciones .)
    ELSE            reduce using rule 22 (elsif_clauses -> ELSIF expresion instrucciones .)
    ELSIF           shift and go to state 92

    elsif_clauses                  shift and go to state 125

state 118

    (23) elsif_clauses -> ELSIF expresion THEN . instrucciones
    (25) elsif_clauses -> ELSIF expresion THEN . instrucciones elsif_clauses
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 126
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 119

    (17) if_else -> IF expresion THEN instrucciones ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 127


state 120

    (19) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .

    PUTS            reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    DEF             reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    IF              reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    $end            reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    END_BLOCK       reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    ELSE            reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)
    ELSIF           reduce using rule 19 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses END_BLOCK .)


state 121

    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE . instrucciones END_BLOCK
    (48) instrucciones -> . instruccion
    (49) instrucciones -> . instruccion instrucciones
    (50) instrucciones -> . instruccion PUNTO_Y_COMA instrucciones
    (51) instruccion -> . asignacion
    (52) instruccion -> . impresion
    (53) instruccion -> . condicion
    (54) instruccion -> . llamada_funcion
    (55) instruccion -> . funcion
    (8) asignacion -> . variable ASIGNACION valores
    (9) impresion -> . PUTS PARENTESIS_IZQ argumentos PARENTESIS_DER
    (11) condicion -> . if
    (12) condicion -> . if_else
    (13) condicion -> . if_elsif_else
    (56) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER
    (57) llamada_funcion -> . VARIABLE_LOCAL PARENTESIS_IZQ PARENTESIS_DER
    (26) funcion -> . DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK
    (58) variable -> . VARIABLE_LOCAL
    (59) variable -> . VARIABLE_GLOBAL
    (60) variable -> . VARIABLE_INSTANCIA
    (61) variable -> . VARIABLE_CLASE
    (14) if -> . IF expresion instrucciones END_BLOCK
    (15) if -> . IF expresion THEN instrucciones END_BLOCK
    (16) if_else -> . IF expresion instrucciones ELSE instrucciones END_BLOCK
    (17) if_else -> . IF expresion THEN instrucciones ELSE instrucciones END_BLOCK
    (18) if_elsif_else -> . IF expresion instrucciones elsif_clauses END_BLOCK
    (19) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses END_BLOCK
    (20) if_elsif_else -> . IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK
    (21) if_elsif_else -> . IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK

    PUTS            shift and go to state 9
    VARIABLE_LOCAL  shift and go to state 78
    DEF             shift and go to state 14
    VARIABLE_GLOBAL shift and go to state 16
    VARIABLE_INSTANCIA shift and go to state 17
    VARIABLE_CLASE  shift and go to state 18
    IF              shift and go to state 19

    instrucciones                  shift and go to state 128
    instruccion                    shift and go to state 63
    asignacion                     shift and go to state 73
    impresion                      shift and go to state 74
    condicion                      shift and go to state 75
    llamada_funcion                shift and go to state 76
    funcion                        shift and go to state 77
    variable                       shift and go to state 8
    if                             shift and go to state 11
    if_else                        shift and go to state 12
    if_elsif_else                  shift and go to state 13

state 122

    (56) llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .

    PUNTO_Y_COMA    reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    PUTS            reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_LOCAL  reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    DEF             reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_GLOBAL reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_INSTANCIA reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    VARIABLE_CLASE  reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    IF              reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    END_BLOCK       reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSE            reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)
    ELSIF           reduce using rule 56 (llamada_funcion -> VARIABLE_LOCAL PARENTESIS_IZQ argumentos PARENTESIS_DER .)


state 123

    (26) funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .

    PUTS            reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    DEF             reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    IF              reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    $end            reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    ELSE            reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)
    ELSIF           reduce using rule 26 (funcion -> DEF VARIABLE_LOCAL PARENTESIS_IZQ parametros PARENTESIS_DER instrucciones END_BLOCK .)


state 124

    (20) if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 20 (if_elsif_else -> IF expresion instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)


state 125

    (24) elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .

    END_BLOCK       reduce using rule 24 (elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .)
    ELSE            reduce using rule 24 (elsif_clauses -> ELSIF expresion instrucciones elsif_clauses .)


state 126

    (23) elsif_clauses -> ELSIF expresion THEN instrucciones .
    (25) elsif_clauses -> ELSIF expresion THEN instrucciones . elsif_clauses
    (22) elsif_clauses -> . ELSIF expresion instrucciones
    (23) elsif_clauses -> . ELSIF expresion THEN instrucciones
    (24) elsif_clauses -> . ELSIF expresion instrucciones elsif_clauses
    (25) elsif_clauses -> . ELSIF expresion THEN instrucciones elsif_clauses

    END_BLOCK       reduce using rule 23 (elsif_clauses -> ELSIF expresion THEN instrucciones .)
    ELSE            reduce using rule 23 (elsif_clauses -> ELSIF expresion THEN instrucciones .)
    ELSIF           shift and go to state 92

    elsif_clauses                  shift and go to state 129

state 127

    (17) if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 17 (if_else -> IF expresion THEN instrucciones ELSE instrucciones END_BLOCK .)


state 128

    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones . END_BLOCK

    END_BLOCK       shift and go to state 130


state 129

    (25) elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .

    END_BLOCK       reduce using rule 25 (elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .)
    ELSE            reduce using rule 25 (elsif_clauses -> ELSIF expresion THEN instrucciones elsif_clauses .)


state 130

    (21) if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .

    PUTS            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    CORCHETE_IZQ    reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    DEF             reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_LOCAL  reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_GLOBAL reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_INSTANCIA reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    VARIABLE_CLASE  reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    IF              reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    $end            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    PUNTO_Y_COMA    reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    END_BLOCK       reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSE            reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)
    ELSIF           reduce using rule 21 (if_elsif_else -> IF expresion THEN instrucciones elsif_clauses ELSE instrucciones END_BLOCK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAYOR_QUE in state 38 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 38 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 38 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 81 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 81 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 81 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT in state 81 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 94 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 94 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT in state 94 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 95 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 95 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT in state 95 resolved as shift
WARNING: shift/reduce conflict for PARENTESIS_DER in state 98 resolved as shift
